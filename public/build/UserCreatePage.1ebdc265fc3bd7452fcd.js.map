{"version":3,"file":"UserCreatePage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/admin/UserCreatePage.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { StoreState } from '../../types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { updateLocation } from 'app/core/actions';\n\ninterface UserCreatePageProps {\n  navModel: NavModel;\n  updateLocation: typeof updateLocation;\n}\ninterface UserDTO {\n  name: string;\n  password: string;\n  email?: string;\n  login?: string;\n}\n\nconst createUser = async (user: UserDTO) => getBackendSrv().post('/api/admin/users', user);\n\nconst UserCreatePage: React.FC<UserCreatePageProps> = ({ navModel, updateLocation }) => {\n  const onSubmit = useCallback(async (data: UserDTO) => {\n    await createUser(data);\n    updateLocation({ path: '/admin/users' });\n  }, []);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h1>添加新用户</h1>\n        <Form onSubmit={onSubmit} validateOn=\"onBlur\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field label=\"名字\" required invalid={!!errors.name} error={errors.name ? '名称为必填项' : undefined}>\n                  <Input name=\"name\" ref={register({ required: true })} />\n                </Field>\n\n                <Field label=\"电子邮件\">\n                  <Input name=\"email\" ref={register} />\n                </Field>\n\n                <Field label=\"用户名\">\n                  <Input name=\"login\" ref={register} />\n                </Field>\n                <Field\n                  label=\"密码\"\n                  required\n                  invalid={!!errors.password}\n                  error={errors.password ? '密码为必填项，必须至少包含4个字符' : undefined}\n                >\n                  <Input\n                    type=\"password\"\n                    name=\"password\"\n                    ref={register({\n                      validate: value => value.trim() !== '' && value.length >= 4,\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">创建用户</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'global-users'),\n});\n\nconst mapDispatchToProps = {\n  updateLocation,\n};\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(UserCreatePage));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAHA;AAQA;AAAA;AAGA;AAKA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AACA;AADA;AAGA;;;;;A","sourceRoot":""}