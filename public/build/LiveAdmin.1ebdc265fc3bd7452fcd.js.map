{"version":3,"file":"LiveAdmin.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/admin/LiveAdmin.tsx","webpack:////./public/app/features/admin/LivePanel.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport Page from 'app/core/components/Page/Page';\nimport { NavModel, SelectableValue, FeatureState } from '@grafana/data';\nimport { LivePanel } from './LivePanel';\nimport { Select, Input, Button, FeatureInfoBox, Container } from '@grafana/ui';\nimport { getGrafanaLiveSrv } from '@grafana/runtime';\n\ninterface Props {\n  navModel: NavModel;\n}\n\ninterface State {\n  channel: string;\n  text: string;\n}\n\nexport class LiveAdmin extends PureComponent<Props, State> {\n  state: State = {\n    channel: 'random-2s-stream',\n    text: '', // publish text to a channel\n  };\n\n  onChannelChanged = (v: SelectableValue<string>) => {\n    if (v.value) {\n      this.setState({\n        channel: v.value,\n      });\n    }\n  };\n\n  onTextChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ text: event.target.value });\n  };\n\n  onPublish = () => {\n    const { text, channel } = this.state;\n    if (text) {\n      const msg = {\n        line: text,\n      };\n\n      const srv = getGrafanaLiveSrv();\n      srv.publish(channel, msg).then(v => {\n        console.log('PUBLISHED', text, v);\n      });\n    }\n    this.setState({ text: '' });\n  };\n\n  render() {\n    const { navModel } = this.props;\n    const { channel, text } = this.state;\n\n    const channels: Array<SelectableValue<string>> = [\n      {\n        label: 'random-2s-stream',\n        value: 'random-2s-stream',\n        description: 'Random stream that updates every 2s',\n      },\n      {\n        label: 'random-flakey-stream',\n        value: 'random-flakey-stream',\n        description: 'Random stream with intermittent updates',\n      },\n      {\n        label: 'example-chat',\n        value: 'example-chat',\n        description: 'A channel that expects chat messages',\n      },\n    ];\n    let current = channels.find(f => f.value === channel);\n    if (!current) {\n      current = {\n        label: channel,\n        value: channel,\n      };\n      channels.push(current);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <Container grow={1}>\n            <FeatureInfoBox\n              title=\"Grafana Live\"\n              featureState={FeatureState.alpha}\n              // url={getDocsLink(DocsId.Transformations)}\n            >\n              <p>这支持grafana核心中的实时事件流。 此功能正在大力开发中。 随着生产准备就绪，界面和结构会发生变化。</p>\n            </FeatureInfoBox>\n            <br />\n            <br />\n          </Container>\n\n          <h2>通道</h2>\n          <Select options={channels} value={current} onChange={this.onChannelChanged} allowCustomValue={true} />\n          <br />\n\n          <LivePanel channel={channel} />\n\n          <br />\n          <br />\n          <h3>写入通道</h3>\n          <Input value={text} onChange={this.onTextChanged} />\n          <Button onClick={this.onPublish} variant={text ? 'primary' : 'secondary'}>\n            发布\n          </Button>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'live'),\n});\n\nexport default hot(module)(connect(mapStateToProps)(LiveAdmin));\n","import React, { PureComponent } from 'react';\nimport { Unsubscribable, PartialObserver } from 'rxjs';\nimport { getGrafanaLiveSrv } from '@grafana/runtime';\n\ninterface Props {\n  channel: string;\n}\n\ninterface State {\n  connected: boolean;\n  count: number;\n  lastTime: number;\n  lastBody: string;\n}\n\nexport class LivePanel extends PureComponent<Props, State> {\n  state: State = {\n    connected: false,\n    count: 0,\n    lastTime: 0,\n    lastBody: '',\n  };\n  subscription?: Unsubscribable;\n\n  observer: PartialObserver<any> = {\n    next: (msg: any) => {\n      this.setState({\n        count: this.state.count + 1,\n        lastTime: Date.now(),\n        lastBody: JSON.stringify(msg),\n      });\n    },\n  };\n\n  startSubscription = () => {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n\n    const srv = getGrafanaLiveSrv();\n    if (srv.isConnected()) {\n      const stream = srv.getChannelStream(this.props.channel);\n      this.subscription = stream.subscribe(this.observer);\n      this.setState({ connected: true, count: 0, lastTime: 0, lastBody: '' });\n      return;\n    }\n    console.log('尚未连接...请重试...');\n    setTimeout(this.startSubscription, 200);\n  };\n\n  componentDidMount = () => {\n    this.startSubscription();\n  };\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n  componentDidUpdate(oldProps: Props) {\n    if (oldProps.channel !== this.props.channel) {\n      this.startSubscription();\n    }\n  }\n\n  render() {\n    const { lastBody, lastTime, count } = this.state;\n\n    return (\n      <div>\n        <h5>Count: {count}</h5>\n        {lastTime > 0 && (\n          <>\n            <h5>最后: {lastTime}</h5>\n            {lastBody && (\n              <div>\n                <pre>{lastBody}</pre>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AAHA;AACA;AAFA;AAOA;AACA;AACA;AADA;AAGA;AACA;AACA;AAbA;AAeA;AAAA;AAAA;AACA;AACA;AAjBA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAhCA;AAAA;AACA;AADA;AAAA;AAAA;AAiCA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAHA;AAYA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;AA9FA;AACA;AADA;AAAA;AACA;AAgGA;AAAA;AACA;AADA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzHA;AAEA;AAaA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AADA;AAUA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AACA;AAVA;AAoBA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAnCA;AAqCA;AACA;AACA;AAvCA;AAAA;AACA;AADA;AAAA;AAAA;AAyCA;AACA;AACA;AACA;AACA;AA7CA;AAAA;AAAA;AAgDA;AACA;AACA;AACA;AAnDA;AAAA;AAAA;AAqDA;AAAA;AAAA;AAAA;AAGA;AAeA;AAvEA;AACA;AADA;AAAA;;;;A","sourceRoot":""}