{"version":3,"file":"NewOrgPage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/org/NewOrgPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { Button, Input, Field, Form } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { StoreState } from 'app/types';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { getNavModel } from '../../core/selectors/navModel';\n\nconst createOrg = async (newOrg: { name: string }) => {\n  const result = await getBackendSrv().post('/api/orgs/', newOrg);\n\n  await getBackendSrv().post('/api/user/using/' + result.orgId);\n  window.location.href = getConfig().appSubUrl + '/org';\n};\n\nconst validateOrg = async (orgName: string) => {\n  try {\n    await getBackendSrv().get(`api/orgs/name/${encodeURI(orgName)}`);\n  } catch (error) {\n    if (error.status === 404) {\n      error.isHandled = true;\n      return true;\n    }\n    return 'Something went wrong';\n  }\n  return 'Organization already exists';\n};\n\ninterface PropsWithState {\n  navModel: NavModel;\n}\n\ninterface CreateOrgFormDTO {\n  name: string;\n}\n\nexport const NewOrgPage: FC<PropsWithState> = ({ navModel }) => {\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h3 className=\"page-sub-heading\">新组织</h3>\n\n        <p className=\"playlist-description\">\n          每个组织都包含自己的仪表板，数据源和配置，并且不能在组织之间共享。\n          尽管用户可能属于多个用户，但在多租户部署中最经常使用多个组织。{' '}\n        </p>\n\n        <Form<CreateOrgFormDTO> onSubmit={createOrg}>\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field label=\"组织名称\" invalid={!!errors.name} error={errors.name && errors.name.message}>\n                  <Input\n                    placeholder=\"组织名\"\n                    name=\"name\"\n                    ref={register({\n                      required: '组织名称是必填项',\n                      validate: async orgName => await validateOrg(orgName),\n                    })}\n                  />\n                </Field>\n                <Button type=\"submit\">创建</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => {\n  return { navModel: getNavModel(state.navIndex, 'global-orgs') };\n};\n\nexport default hot(module)(connect(mapStateToProps)(NewOrgPage));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AALA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAoBA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAFA;AAHA;AASA;AAAA;AAGA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;A","sourceRoot":""}