{"version":3,"file":"grafanaPlugin.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/plugins/datasource/grafana/datasource.ts","webpack:////./public/app/plugins/datasource/grafana/module.ts"],"sourcesContent":["import _ from 'lodash';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { DataSourceApi, DataSourceInstanceSettings } from '@grafana/data';\n\nimport templateSrv from 'app/features/templating/template_srv';\n\nclass GrafanaDatasource extends DataSourceApi<any> {\n  /** @ngInject */\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  query(options: any) {\n    return getBackendSrv()\n      .get('/api/tsdb/testdata/random-walk', {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n      })\n      .then((res: any) => {\n        const data: any[] = [];\n\n        if (res.results) {\n          _.forEach(res.results, queryRes => {\n            for (const series of queryRes.series) {\n              data.push({\n                target: series.name,\n                datapoints: series.points,\n              });\n            }\n          });\n        }\n\n        return { data: data };\n      });\n  }\n\n  metricFindQuery(options: any) {\n    return Promise.resolve([]);\n  }\n\n  annotationQuery(options: any) {\n    const params: any = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      limit: options.annotation.limit,\n      tags: options.annotation.tags,\n      matchAny: options.annotation.matchAny,\n    };\n\n    if (options.annotation.type === 'dashboard') {\n      // if no dashboard id yet return\n      if (!options.dashboard.id) {\n        return Promise.resolve([]);\n      }\n      // filter by dashboard id\n      params.dashboardId = options.dashboard.id;\n      // remove tags filter if any\n      delete params.tags;\n    } else {\n      // require at least one tag\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\n        return Promise.resolve([]);\n      }\n      const delimiter = '__delimiter__';\n      const tags = [];\n      for (const t of params.tags) {\n        const renderedValues = templateSrv.replace(t, {}, (value: any) => {\n          if (typeof value === 'string') {\n            return value;\n          }\n\n          return value.join(delimiter);\n        });\n        for (const tt of renderedValues.split(delimiter)) {\n          tags.push(tt);\n        }\n      }\n      params.tags = tags;\n    }\n\n    return getBackendSrv().get(\n      '/api/annotations',\n      params,\n      `grafana-data-source-annotations-${options.annotation.name}-${options.dashboard?.id}`\n    );\n  }\n\n  testDatasource() {\n    return Promise.resolve();\n  }\n}\n\nexport { GrafanaDatasource };\n","import { GrafanaDatasource } from './datasource';\nimport { QueryCtrl } from 'app/plugins/sdk';\n\nclass GrafanaQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n}\n\nclass GrafanaAnnotationsQueryCtrl {\n  annotation: any;\n\n  types = [\n    { text: '仪表板', value: 'dashboard' },\n    { text: '标签', value: 'tags' },\n  ];\n\n  constructor() {\n    this.annotation.type = this.annotation.type || 'tags';\n    this.annotation.limit = this.annotation.limit || 100;\n  }\n\n  static templateUrl = 'partials/annotations.editor.html';\n}\n\nexport {\n  GrafanaDatasource,\n  GrafanaDatasource as Datasource,\n  GrafanaQueryCtrl as QueryCtrl,\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AAnBA;AACA;AADA;AAoBA;AACA;AACA;AAKA;;;AAEA;AACA;AACA;;;;AArFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;;;;AAAA;AACA;AADA;AACA;AAGA;AAQA;AACA;AADA;AAJA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAZA;;;;;A","sourceRoot":""}