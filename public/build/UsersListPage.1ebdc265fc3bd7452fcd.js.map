{"version":3,"file":"UsersListPage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/users/InviteeRow.tsx","webpack:////./public/app/features/users/InviteesTable.tsx","webpack:////./public/app/features/users/UsersActionBar.tsx","webpack:////./public/app/features/users/UsersListPage.tsx","webpack:////./public/app/features/users/UsersTable.tsx","webpack:////./public/app/features/users/state/actions.ts","webpack:////./public/app/features/users/state/selectors.ts"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Invitee } from 'app/types';\nimport { revokeInvite } from './state/actions';\nimport { Button, ClipboardButton } from '@grafana/ui';\n\nexport interface Props {\n  invitee: Invitee;\n  revokeInvite: typeof revokeInvite;\n}\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            复制邀请\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button variant=\"destructive\" size=\"sm\" icon=\"times\" onClick={() => revokeInvite(invitee.code)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nexport default connect(() => {\n  return {};\n}, mapDispatchToProps)(InviteeRow);\n","import React, { PureComponent } from 'react';\nimport { Invitee } from 'app/types';\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>电子邮件</th>\n            <th>名字</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody>\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { setUsersSearchQuery } from './state/reducers';\nimport { getInviteesCount, getUsersSearchQuery } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { RadioButtonGroup, LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  searchQuery: string;\n  setUsersSearchQuery: typeof setUsersSearchQuery;\n  onShowInvites: () => void;\n  pendingInvitesCount: number;\n  canInvite: boolean;\n  showInvites: boolean;\n  externalUserMngLinkUrl: string;\n  externalUserMngLinkName: string;\n}\n\nexport class UsersActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      canInvite,\n      externalUserMngLinkName,\n      externalUserMngLinkUrl,\n      searchQuery,\n      pendingInvitesCount,\n      setUsersSearchQuery,\n      onShowInvites,\n      showInvites,\n    } = this.props;\n    const options = [\n      { label: '用户', value: 'users' },\n      { label: `发送邀请 (${pendingInvitesCount})`, value: 'invites' },\n    ];\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput\n            labelClassName=\"gf-form--has-input-icon\"\n            inputClassName=\"gf-form-input width-20\"\n            value={searchQuery}\n            onChange={setUsersSearchQuery}\n            placeholder=\"通过登录名，电子邮件或姓名搜索用户\"\n          />\n          {pendingInvitesCount > 0 && (\n            <div style={{ marginLeft: '1rem' }}>\n              <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n            </div>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {canInvite && <LinkButton href=\"org/users/invite\">邀请</LinkButton>}\n          {externalUserMngLinkUrl && (\n            <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n              {externalUserMngLinkName}\n            </LinkButton>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: getInviteesCount(state.users),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n    canInvite: state.users.canInvite,\n  };\n}\n\nconst mapDispatchToProps = {\n  setUsersSearchQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersActionBar);\n","import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport { NavModel, renderMarkdown } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport UsersActionBar from './UsersActionBar';\nimport UsersTable from './UsersTable';\nimport InviteesTable from './InviteesTable';\nimport { Invitee, OrgUser, OrgRole } from 'app/types';\nimport { loadInvitees, loadUsers, removeUser, updateUser } from './state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getInvitees, getUsers, getUsersSearchQuery } from './state/selectors';\nimport { setUsersSearchQuery } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  invitees: Invitee[];\n  users: OrgUser[];\n  searchQuery: string;\n  externalUserMngInfo: string;\n  hasFetched: boolean;\n  loadUsers: typeof loadUsers;\n  loadInvitees: typeof loadInvitees;\n  setUsersSearchQuery: typeof setUsersSearchQuery;\n  updateUser: typeof updateUser;\n  removeUser: typeof removeUser;\n}\n\nexport interface State {\n  showInvites: boolean;\n}\n\nexport class UsersListPage extends PureComponent<Props, State> {\n  externalUserMngInfoHtml: string;\n\n  constructor(props: Props) {\n    super(props);\n\n    if (this.props.externalUserMngInfo) {\n      this.externalUserMngInfoHtml = renderMarkdown(this.props.externalUserMngInfo);\n    }\n\n    this.state = {\n      showInvites: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchUsers();\n    this.fetchInvitees();\n  }\n\n  async fetchUsers() {\n    return await this.props.loadUsers();\n  }\n\n  async fetchInvitees() {\n    return await this.props.loadInvitees();\n  }\n\n  onRoleChange = (role: OrgRole, user: OrgUser) => {\n    const updatedUser = { ...user, role: role };\n\n    this.props.updateUser(updatedUser);\n  };\n\n  onShowInvites = () => {\n    this.setState(prevState => ({\n      showInvites: !prevState.showInvites,\n    }));\n  };\n\n  renderTable() {\n    const { invitees, users } = this.props;\n\n    if (this.state.showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <UsersTable\n          users={users}\n          onRoleChange={(role, user) => this.onRoleChange(role, user)}\n          onRemoveUser={user => this.props.removeUser(user.userId)}\n        />\n      );\n    }\n  }\n\n  render() {\n    const { navModel, hasFetched } = this.props;\n    const externalUserMngInfoHtml = this.externalUserMngInfoHtml;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>\n          <>\n            <UsersActionBar onShowInvites={this.onShowInvites} showInvites={this.state.showInvites} />\n            {externalUserMngInfoHtml && (\n              <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n            )}\n            {hasFetched && this.renderTable()}\n          </>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    navModel: getNavModel(state.navIndex, 'users'),\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    invitees: getInvitees(state.users),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    hasFetched: state.users.hasFetched,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  loadInvitees,\n  setUsersSearchQuery,\n  updateUser,\n  removeUser,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(UsersListPage));\n","import React, { FC, useState } from 'react';\nimport { OrgUser } from 'app/types';\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { OrgRole } from '@grafana/data';\n\nexport interface Props {\n  users: OrgUser[];\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nconst UsersTable: FC<Props> = props => {\n  const { users, onRoleChange, onRemoveUser } = props;\n\n  const [showRemoveModal, setShowRemoveModal] = useState<string | boolean>(false);\n  return (\n    <table className=\"filter-table form-inline\">\n      <thead>\n        <tr>\n          <th />\n          <th>登陆</th>\n          <th>电子邮件</th>\n          <th>名字</th>\n          <th>最近访问</th>\n          <th>角色</th>\n          <th style={{ width: '34px' }} />\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user, index) => {\n          return (\n            <tr key={`${user.userId}-${index}`}>\n              <td className=\"width-2 text-center\">\n                <img className=\"filter-table__avatar\" src={user.avatarUrl} />\n              </td>\n              <td className=\"max-width-6\">\n                <span className=\"ellipsis\" title={user.login}>\n                  {user.login}\n                </span>\n              </td>\n\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-5\">\n                <span className=\"ellipsis\" title={user.name}>\n                  {user.name}\n                </span>\n              </td>\n              <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n              <td className=\"width-8\">\n                <OrgRolePicker value={user.role} onChange={newRole => onRoleChange(newRole, user)} />\n              </td>\n\n              <td>\n                <Button size=\"sm\" variant=\"destructive\" onClick={() => setShowRemoveModal(user.login)} icon=\"times\" />\n                <ConfirmModal\n                  body={`您确定要删除用户 ${user.login}?`}\n                  confirmText=\"删除\"\n                  title=\"删除\"\n                  onDismiss={() => setShowRemoveModal(false)}\n                  isOpen={user.login === showRemoveModal}\n                  onConfirm={() => {\n                    onRemoveUser(user);\n                  }}\n                />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default UsersTable;\n","import { ThunkResult } from '../../../types';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { OrgUser } from 'app/types';\nimport { inviteesLoaded, usersLoaded } from './reducers';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async dispatch => {\n    const users = await getBackendSrv().get('/api/org/users');\n    dispatch(usersLoaded(users));\n  };\n}\n\nexport function loadInvitees(): ThunkResult<void> {\n  return async dispatch => {\n    const invitees = await getBackendSrv().get('/api/org/invites');\n    dispatch(inviteesLoaded(invitees));\n  };\n}\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function revokeInvite(code: string): ThunkResult<void> {\n  return async dispatch => {\n    await getBackendSrv().patch(`/api/org/invites/${code}/revoke`, {});\n    dispatch(loadInvitees());\n  };\n}\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter(user => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getInvitees = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.invitees.filter(invitee => {\n    return regex.test(invitee.name) || regex.test(invitee.email);\n  });\n};\n\nexport const getInviteesCount = (state: UsersState) => state.invitees.length;\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\n"],"mappings":"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;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;;;;A","sourceRoot":""}