{"version":3,"file":"default~ChangePasswordPage~UserProfileEdit.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/core/utils/UserProvider.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { User, Team, UserOrg, UserSession } from 'app/types';\nimport { config } from 'app/core/config';\nimport { dateTimeFormat, dateTimeFormatTimeAgo } from '@grafana/data';\n\nexport interface UserAPI {\n  changePassword: (changePassword: ChangePasswordFields) => void;\n  updateUserProfile: (profile: ProfileUpdateFields) => void;\n  loadUser: () => void;\n  loadTeams: () => void;\n  loadOrgs: () => void;\n  loadSessions: () => void;\n  setUserOrg: (org: UserOrg) => void;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nexport interface LoadingStates {\n  changePassword: boolean;\n  loadUser: boolean;\n  loadTeams: boolean;\n  loadOrgs: boolean;\n  loadSessions: boolean;\n  updateUserProfile: boolean;\n  updateUserOrg: boolean;\n}\n\nexport interface ChangePasswordFields {\n  oldPassword: string;\n  newPassword: string;\n  confirmNew: string;\n}\n\nexport interface ProfileUpdateFields {\n  name: string;\n  email: string;\n  login: string;\n}\n\nexport interface Props {\n  userId?: number; // passed, will load user on mount\n  children: (\n    api: UserAPI,\n    states: LoadingStates,\n    teams: Team[],\n    orgs: UserOrg[],\n    sessions: UserSession[],\n    user?: User\n  ) => JSX.Element;\n}\n\nexport interface State {\n  user?: User;\n  teams: Team[];\n  orgs: UserOrg[];\n  sessions: UserSession[];\n  loadingStates: LoadingStates;\n}\n\nexport class UserProvider extends PureComponent<Props, State> {\n  state: State = {\n    teams: [] as Team[],\n    orgs: [] as UserOrg[],\n    sessions: [] as UserSession[],\n    loadingStates: {\n      changePassword: false,\n      loadUser: true,\n      loadTeams: false,\n      loadOrgs: false,\n      loadSessions: false,\n      updateUserProfile: false,\n      updateUserOrg: false,\n    },\n  };\n\n  componentWillMount() {\n    if (this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  changePassword = async (payload: ChangePasswordFields) => {\n    this.setState({ loadingStates: { ...this.state.loadingStates, changePassword: true } });\n    await getBackendSrv().put('/api/user/password', payload);\n    this.setState({ loadingStates: { ...this.state.loadingStates, changePassword: false } });\n  };\n\n  loadUser = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadUser: true },\n    });\n    const user = await getBackendSrv().get('/api/user');\n    this.setState({ user, loadingStates: { ...this.state.loadingStates, loadUser: Object.keys(user).length === 0 } });\n  };\n\n  loadTeams = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadTeams: true },\n    });\n    const teams = await getBackendSrv().get('/api/user/teams');\n    this.setState({ teams, loadingStates: { ...this.state.loadingStates, loadTeams: false } });\n  };\n\n  loadOrgs = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadOrgs: true },\n    });\n    const orgs = await getBackendSrv().get('/api/user/orgs');\n    this.setState({ orgs, loadingStates: { ...this.state.loadingStates, loadOrgs: false } });\n  };\n\n  loadSessions = async () => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, loadSessions: true },\n    });\n\n    await getBackendSrv()\n      .get('/api/user/auth-tokens')\n      .then((sessions: UserSession[]) => {\n        sessions = sessions\n          // Show active sessions first\n          .sort((a, b) => Number(b.isActive) - Number(a.isActive))\n          .map((session: UserSession) => {\n            return {\n              id: session.id,\n              isActive: session.isActive,\n              seenAt: dateTimeFormatTimeAgo(session.seenAt),\n              createdAt: dateTimeFormat(session.createdAt, { format: 'MMMM DD, YYYY' }),\n              clientIp: session.clientIp,\n              browser: session.browser,\n              browserVersion: session.browserVersion,\n              os: session.os,\n              osVersion: session.osVersion,\n              device: session.device,\n            };\n          });\n\n        this.setState({ sessions, loadingStates: { ...this.state.loadingStates, loadSessions: false } });\n      });\n  };\n\n  revokeUserSession = async (tokenId: number) => {\n    await getBackendSrv()\n      .post('/api/user/revoke-auth-token', {\n        authTokenId: tokenId,\n      })\n      .then(() => {\n        const sessions = this.state.sessions.filter((session: UserSession) => {\n          return session.id !== tokenId;\n        });\n\n        this.setState({ sessions });\n      });\n  };\n\n  setUserOrg = async (org: UserOrg) => {\n    this.setState({\n      loadingStates: { ...this.state.loadingStates, updateUserOrg: true },\n    });\n    await getBackendSrv()\n      .post('/api/user/using/' + org.orgId, {})\n      .then(() => {\n        window.location.href = config.appSubUrl + '/profile';\n      })\n      .finally(() => {\n        this.setState({ loadingStates: { ...this.state.loadingStates, updateUserOrg: false } });\n      });\n  };\n\n  updateUserProfile = async (payload: ProfileUpdateFields) => {\n    this.setState({ loadingStates: { ...this.state.loadingStates, updateUserProfile: true } });\n    await getBackendSrv()\n      .put('/api/user', payload)\n      .then(this.loadUser)\n      .catch(e => console.error(e))\n      .finally(() => {\n        this.setState({ loadingStates: { ...this.state.loadingStates, updateUserProfile: false } });\n      });\n  };\n\n  render() {\n    const { children } = this.props;\n    const { loadingStates, teams, orgs, sessions, user } = this.state;\n\n    const api: UserAPI = {\n      changePassword: this.changePassword,\n      loadUser: this.loadUser,\n      loadTeams: this.loadTeams,\n      loadOrgs: this.loadOrgs,\n      loadSessions: this.loadSessions,\n      revokeUserSession: this.revokeUserSession,\n      updateUserProfile: this.updateUserProfile,\n      setUserOrg: this.setUserOrg,\n    };\n\n    return <>{children(api, loadingStates, teams, orgs, sessions, user)}</>;\n  }\n}\n\nexport default UserProvider;\n"],"mappings":"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","sourceRoot":""}