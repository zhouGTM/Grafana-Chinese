{"version":3,"file":"FolderPermissions.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/folders/FolderPermissions.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\nimport Page from 'app/core/components/Page/Page';\nimport { Tooltip, Icon } from '@grafana/ui';\nimport { NavModel } from '@grafana/data';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState, FolderState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\n\nexport interface Props {\n  navModel: NavModel;\n  folderUid: string;\n  folder: FolderState;\n  getFolderByUid: typeof getFolderByUid;\n  getFolderPermissions: typeof getFolderPermissions;\n  updateFolderPermission: typeof updateFolderPermission;\n  removeFolderPermission: typeof removeFolderPermission;\n  addFolderPermission: typeof addFolderPermission;\n}\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">文件夹权限</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <button className=\"btn btn-primary pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              添加权限\n            </button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  const uid = state.location.routeParams.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(FolderPermissions));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAOA;AACA;AACA;AACA;AAiBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAcA;AAAA;AAAA;AACA;AACA;AAhBA;AAkBA;AACA;AACA;AApBA;AAsBA;AACA;AACA;AAxBA;AA0BA;AACA;AACA;AA5BA;AA8BA;AAAA;AAAA;AACA;AACA;AA7BA;AACA;AADA;AAHA;AAMA;AACA;AARA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAUA;AA5EA;AACA;AADA;AAAA;AACA;AA8EA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;;A","sourceRoot":""}