{"version":3,"file":"SignupPage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/core/components/Signup/Signup.tsx","webpack:////./public/app/core/components/Signup/SignupPage.tsx"],"sourcesContent":["import React, { FC } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { StoreState } from 'app/types';\nimport { Form, Field, Input, Button, HorizontalGroup, LinkButton } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { getBackendSrv } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport { AppEvents } from '@grafana/data';\n\ninterface SignupDTO {\n  name: string;\n  email: string;\n  username: string;\n  orgName?: string;\n  password: string;\n  code: string;\n  confirm: string;\n}\n\ninterface ConnectedProps {\n  email?: string;\n  code?: string;\n}\n\nconst SignupUnconnected: FC<ConnectedProps> = props => {\n  const onSubmit = async (formData: SignupDTO) => {\n    if (formData.name === '') {\n      delete formData.name;\n    }\n    delete formData.confirm;\n\n    const response = await getBackendSrv()\n      .post('/api/user/signup/step2', {\n        email: formData.email,\n        code: formData.code,\n        username: formData.email,\n        orgName: formData.orgName,\n        password: formData.password,\n        name: formData.name,\n      })\n      .catch(err => {\n        const msg = err.data?.message || err;\n        appEvents.emit(AppEvents.alertWarning, [msg]);\n      });\n\n    if (response.code === 'redirect-to-select-org') {\n      window.location.href = getConfig().appSubUrl + '/profile/select-org?signup=1';\n    }\n    window.location.href = getConfig().appSubUrl + '/';\n  };\n\n  const defaultValues = {\n    email: props.email,\n    code: props.code,\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ errors, register, getValues }) => (\n        <>\n          <Field label=\"Your name\">\n            <Input name=\"name\" placeholder=\"(optional)\" ref={register} />\n          </Field>\n          <Field label=\"Email\" invalid={!!errors.email} error={errors.email?.message}>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              ref={register({\n                required: 'Email is required',\n                pattern: {\n                  value: /^\\S+@\\S+$/,\n                  message: 'Email is invalid',\n                },\n              })}\n            />\n          </Field>\n          {!getConfig().autoAssignOrg && (\n            <Field label=\"Org. name\">\n              <Input name=\"orgName\" placeholder=\"Org. name\" ref={register} />\n            </Field>\n          )}\n          {getConfig().verifyEmailEnabled && (\n            <Field label=\"Email verification code (sent to your email)\">\n              <Input name=\"code\" ref={register} placeholder=\"Code\" />\n            </Field>\n          )}\n          <Field label=\"Password\" invalid={!!errors.password} error={errors?.password?.message}>\n            <Input\n              autoFocus\n              type=\"password\"\n              name=\"password\"\n              ref={register({\n                required: 'Password is required',\n              })}\n            />\n          </Field>\n          <Field label=\"Confirm password\" invalid={!!errors.confirm} error={errors?.confirm?.message}>\n            <Input\n              type=\"password\"\n              name=\"confirm\"\n              ref={register({\n                required: 'Confirmed password is required',\n                validate: v => v === getValues().password || 'Passwords must match!',\n              })}\n            />\n          </Field>\n\n          <HorizontalGroup>\n            <Button type=\"submit\">Submit</Button>\n            <LinkButton variant=\"link\" href={getConfig().appSubUrl + '/login'}>\n              Back to login\n            </LinkButton>\n          </HorizontalGroup>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, {}, StoreState> = (state: StoreState) => ({\n  email: state.location.routeParams.email?.toString(),\n  code: state.location.routeParams.code?.toString(),\n});\n\nexport const Signup = connect(mapStateToProps)(SignupUnconnected);\n","import React, { FC } from 'react';\nimport { LoginLayout, InnerBox } from '../Login/LoginLayout';\nimport { Signup } from './Signup';\n\nexport const SignupPage: FC = () => {\n  return (\n    <LoginLayout>\n      <InnerBox>\n        <Signup />\n      </InnerBox>\n    </LoginLayout>\n  );\n};\n\nexport default SignupPage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAgBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAJA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAnBA;AAMA;AACA;AAaA;AACA;AACA;AACA;AAAA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAJA;AAcA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAJA;AASA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAHA;AAWA;AAAA;AACA;AAAA;AAAA;AApDA;AA4DA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AACA;AAIA;;;;;;;;;;;;AC7HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAOA;AAEA;;;;A","sourceRoot":""}