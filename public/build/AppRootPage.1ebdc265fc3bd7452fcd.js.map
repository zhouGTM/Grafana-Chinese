{"version":3,"file":"AppRootPage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/plugins/AppRootPage.tsx"],"sourcesContent":["// Libraries\nimport React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n// Types\nimport { StoreState } from 'app/types';\nimport { AppEvents, AppPlugin, AppPluginMeta, NavModel, PluginType, UrlQueryMap } from '@grafana/data';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getPluginSettings } from './PluginSettingsCache';\nimport { importAppPlugin } from './plugin_loader';\nimport { getNotFoundNav, getWarningNav, getExceptionNav } from 'app/core/nav_model_srv';\nimport { appEvents } from 'app/core/core';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\n\ninterface Props {\n  pluginId: string; // From the angular router\n  query: UrlQueryMap;\n  path: string;\n  slug?: string;\n}\n\ninterface State {\n  loading: boolean;\n  plugin?: AppPlugin | null;\n  nav?: NavModel;\n}\n\nexport function getAppPluginPageError(meta: AppPluginMeta) {\n  if (!meta) {\n    return '未知插件';\n  }\n  if (meta.type !== PluginType.app) {\n    return '插件必须是一个应用';\n  }\n  if (!meta.enabled) {\n    return '应用未启用';\n  }\n  return null;\n}\n\nclass AppRootPage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      loading: true,\n    };\n  }\n\n  async componentDidMount() {\n    const { pluginId } = this.props;\n\n    try {\n      const app = await getPluginSettings(pluginId).then(info => {\n        const error = getAppPluginPageError(info);\n        if (error) {\n          appEvents.emit(AppEvents.alertError, [error]);\n          this.setState({ nav: getWarningNav(error) });\n          return null;\n        }\n        return importAppPlugin(info);\n      });\n      this.setState({ plugin: app, loading: false });\n    } catch (err) {\n      this.setState({\n        plugin: null,\n        loading: false,\n        nav: process.env.NODE_ENV === 'development' ? getExceptionNav(err) : getNotFoundNav(),\n      });\n    }\n  }\n\n  onNavChanged = (nav: NavModel) => {\n    this.setState({ nav });\n  };\n\n  render() {\n    const { path, query } = this.props;\n    const { loading, plugin, nav } = this.state;\n\n    if (plugin && !plugin.root) {\n      // TODO? redirect to plugin page?\n      return <div>No Root App</div>;\n    }\n\n    // When no naviagion is set, give full control to the app plugin\n    if (!nav) {\n      if (plugin && plugin.root) {\n        return <plugin.root meta={plugin.meta} query={query} path={path} onNavChanged={this.onNavChanged} />;\n      }\n      return <PageLoader />;\n    }\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents isLoading={loading}>\n          {plugin && plugin.root && (\n            <plugin.root meta={plugin.meta} query={query} path={path} onNavChanged={this.onNavChanged} />\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  pluginId: state.location.routeParams.pluginId,\n  slug: state.location.routeParams.slug,\n  query: state.location.query,\n  path: state.location.path,\n});\n\nexport default hot(module)(connect(mapStateToProps)(AppRootPage));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA+BA;AAAA;AAAA;AACA;AACA;AA/BA;AACA;AADA;AAFA;AAKA;AACA;;;;;;;;;;;;;;AAEA;;;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;;AATA;AASA;AAAA;AAAA;AAAA;;;;;;;AAEA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA7DA;AACA;AA+DA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AACA;AAMA;;;;;A","sourceRoot":""}