{"version":3,"file":"DashboardListPage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/search/components/DashboardListPage.tsx","webpack:////./public/app/features/search/loaders.ts"],"sourcesContent":["import React, { FC, memo } from 'react';\nimport { useAsync } from 'react-use';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { NavModel, locationUtil } from '@grafana/data';\nimport { getLocationSrv } from '@grafana/runtime';\nimport { FolderDTO, StoreState } from 'app/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParams, getUrl } from 'app/core/selectors/location';\nimport Page from 'app/core/components/Page/Page';\nimport { loadFolderPage } from '../loaders';\nimport ManageDashboards from './ManageDashboards';\n\ninterface Props {\n  navModel: NavModel;\n  uid?: string;\n  url: string;\n}\n\nexport const DashboardListPage: FC<Props> = memo(({ navModel, uid, url }) => {\n  const { loading, value } = useAsync<{ folder?: FolderDTO; pageNavModel: NavModel }>(() => {\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({ pageNavModel: navModel });\n    }\n\n    return loadFolderPage(uid!, 'manage-folder-dashboards').then(({ folder, model }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        getLocationSrv().update({ path });\n      }\n\n      return { folder, pageNavModel: { ...navModel, ...model } };\n    });\n  }, [uid]);\n\n  return (\n    <Page navModel={value?.pageNavModel ?? navModel}>\n      <Page.Contents isLoading={loading}>\n        <ManageDashboards folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst mapStateToProps: MapStateToProps<Props, {}, StoreState> = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n    uid: getRouteParams(state.location).uid as string | undefined,\n    url: getUrl(state.location),\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);\n","import { backendSrv } from 'app/core/services/backend_srv';\nimport { NavModel } from '@grafana/data';\n\nexport const loadFolderPage = (uid: string, activeChildId: string) => {\n  const navModel: Pick<NavModel, 'main'> = {\n    main: {\n      icon: 'folder-open',\n      id: 'manage-folder',\n      subTitle: '管理文件夹仪表板和权限',\n      url: '',\n      text: '',\n      breadcrumbs: [{ title: '仪表板', url: 'dashboards' }],\n      children: [\n        {\n          active: activeChildId === 'manage-folder-dashboards',\n          icon: 'th-large',\n          id: 'manage-folder-dashboards',\n          text: '仪表板',\n          url: 'dashboards',\n        },\n        {\n          active: activeChildId === 'manage-folder-permissions',\n          icon: 'lock',\n          id: 'manage-folder-permissions',\n          text: '权限',\n          url: 'dashboards/permissions',\n        },\n        {\n          active: activeChildId === 'manage-folder-settings',\n          icon: 'cog',\n          id: 'manage-folder-settings',\n          text: '设置',\n          url: 'dashboards/settings',\n        },\n      ],\n    },\n  };\n\n  return backendSrv.getFolderByUid(uid).then(folder => {\n    const folderTitle = folder.title;\n    const folderUrl = folder.url;\n    navModel.main.text = folderTitle;\n\n    const dashTab = navModel.main.children!.find((child: any) => child.id === 'manage-folder-dashboards');\n    dashTab!.url = folderUrl;\n\n    if (folder.canAdmin) {\n      const permTab = navModel.main.children!.find((child: any) => child.id === 'manage-folder-permissions');\n      permTab!.url = folderUrl + '/permissions';\n\n      const settingsTab = navModel.main.children!.find((child: any) => child.id === 'manage-folder-settings');\n      settingsTab!.url = folderUrl + '/settings';\n    } else {\n      navModel.main.children = [dashTab!];\n    }\n\n    return { folder, model: navModel };\n  });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAfA;AAAA;AACA;AAgBA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAtBA;AADA;AAkCA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}