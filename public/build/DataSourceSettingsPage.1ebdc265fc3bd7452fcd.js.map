{"version":3,"file":"DataSourceSettingsPage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/core/components/connectWithCleanUp.tsx","webpack:////./public/app/features/datasources/settings/BasicSettings.tsx","webpack:////./public/app/features/datasources/settings/ButtonRow.tsx","webpack:////./public/app/features/datasources/settings/DataSourceSettingsPage.tsx","webpack:////./public/app/features/datasources/settings/PluginSettings.tsx","webpack:////./public/app/features/plugins/PluginStateInfo.tsx"],"sourcesContent":["import { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nexport const connectWithCleanUp = <\n  TStateProps extends {} = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  State = {},\n  TSelector extends object = {},\n  Statics = {}\n>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  stateSelector: StateSelector<TSelector>\n) => (Component: ComponentType<any>) => {\n  const ConnectedComponent = connect(\n    mapStateToProps,\n    mapDispatchToProps\n    // @ts-ignore\n  )(Component);\n\n  const ConnectedComponentWithCleanUp: FunctionComponent = props => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n      return function cleanUp() {\n        dispatch(cleanUpAction({ stateSelector }));\n      };\n    }, []);\n    // @ts-ignore\n    return <ConnectedComponent {...props} />;\n  };\n\n  ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n  hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n  type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n  return ConnectedComponentWithCleanUp as Hoisted;\n};\n","import React, { FC } from 'react';\nimport { InlineFormLabel, LegacyForms } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nconst { Input, Switch } = LegacyForms;\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n}\n\nconst BasicSettings: FC<Props> = ({ dataSourceName, isDefault, onDefaultChange, onNameChange }) => {\n  return (\n    <div className=\"gf-form-group\" aria-label=\"数据源设置页面的基本设置\">\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form max-width-30\" style={{ marginRight: '3px' }}>\n          <InlineFormLabel tooltip={'在面板中选择数据源时使用该名称。 默认数据源是 ' + '在新面板中预先选择。'}>\n            名字\n          </InlineFormLabel>\n          <Input\n            className=\"gf-form-input max-width-23\"\n            type=\"text\"\n            value={dataSourceName}\n            placeholder=\"名字\"\n            onChange={event => onNameChange(event.target.value)}\n            required\n            aria-label={selectors.pages.DataSource.name}\n          />\n        </div>\n        <Switch\n          label=\"默认\"\n          checked={isDefault}\n          onChange={event => {\n            // @ts-ignore\n            onDefaultChange(event.target.checked);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BasicSettings;\n","import React, { FC } from 'react';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport config from 'app/core/config';\n\nexport interface Props {\n  isReadOnly: boolean;\n  onDelete: () => void;\n  onSubmit: (event: any) => void;\n  onTest: (event: any) => void;\n}\n\nconst ButtonRow: FC<Props> = ({ isReadOnly, onDelete, onSubmit, onTest }) => {\n  return (\n    <div className=\"gf-form-button-row\">\n      {!isReadOnly && (\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary\"\n          disabled={isReadOnly}\n          onClick={event => onSubmit(event)}\n          aria-label={selectors.pages.DataSource.saveAndTest}\n        >\n          保存 &amp; 测试\n        </button>\n      )}\n      {isReadOnly && (\n        <button type=\"submit\" className=\"btn btn-success\" onClick={onTest}>\n          测试\n        </button>\n      )}\n      <button\n        type=\"button\"\n        className=\"btn btn-danger\"\n        disabled={isReadOnly}\n        onClick={onDelete}\n        aria-label={selectors.pages.DataSource.delete}\n      >\n        删除\n      </button>\n      <a className=\"btn btn-inverse\" href={`${config.appSubUrl}/datasources`}>\n        返回\n      </a>\n    </div>\n  );\n};\n\nexport default ButtonRow;\n","// Libraries\nimport React, { PureComponent } from 'react';\nimport { hot } from 'react-hot-loader';\nimport isString from 'lodash/isString';\nimport { Icon } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n// Components\nimport Page from 'app/core/components/Page/Page';\nimport { GenericDataSourcePlugin, PluginSettings } from './PluginSettings';\nimport BasicSettings from './BasicSettings';\nimport ButtonRow from './ButtonRow';\n// Services & Utils\nimport appEvents from 'app/core/app_events';\n// Actions & selectors\nimport { getDataSource, getDataSourceMeta } from '../state/selectors';\nimport {\n  deleteDataSource,\n  initDataSourceSettings,\n  loadDataSource,\n  testDataSource,\n  updateDataSource,\n} from '../state/actions';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId } from 'app/core/selectors/location';\n// Types\nimport { CoreEvents, StoreState } from 'app/types/';\nimport { DataSourcePluginMeta, DataSourceSettings, NavModel, UrlQueryMap } from '@grafana/data';\nimport { getDataSourceLoadingNav } from '../state/navModel';\nimport PluginStateinfo from 'app/features/plugins/PluginStateInfo';\nimport { dataSourceLoaded, setDataSourceName, setIsDefault } from '../state/reducers';\nimport { connectWithCleanUp } from 'app/core/components/connectWithCleanUp';\n\nexport interface Props {\n  navModel: NavModel;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  pageId: number;\n  deleteDataSource: typeof deleteDataSource;\n  loadDataSource: typeof loadDataSource;\n  setDataSourceName: typeof setDataSourceName;\n  updateDataSource: typeof updateDataSource;\n  setIsDefault: typeof setIsDefault;\n  dataSourceLoaded: typeof dataSourceLoaded;\n  initDataSourceSettings: typeof initDataSourceSettings;\n  testDataSource: typeof testDataSource;\n  plugin?: GenericDataSourcePlugin;\n  query: UrlQueryMap;\n  page?: string;\n  testingStatus?: {\n    message?: string;\n    status?: string;\n  };\n  loadError?: Error | string;\n}\n\nexport class DataSourceSettingsPage extends PureComponent<Props> {\n  componentDidMount() {\n    const { initDataSourceSettings, pageId } = this.props;\n    initDataSourceSettings(pageId);\n  }\n\n  onSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    await this.props.updateDataSource({ ...this.props.dataSource });\n\n    this.testDataSource();\n  };\n\n  onTest = async (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    this.testDataSource();\n  };\n\n  onDelete = () => {\n    appEvents.emit(CoreEvents.showConfirmModal, {\n      title: '删除',\n      text: '您确定要删除此数据源吗?',\n      yesText: '删除',\n      icon: 'trash-alt',\n      onConfirm: () => {\n        this.confirmDelete();\n      },\n    });\n  };\n\n  confirmDelete = () => {\n    this.props.deleteDataSource();\n  };\n\n  onModelChange = (dataSource: DataSourceSettings) => {\n    this.props.dataSourceLoaded(dataSource);\n  };\n\n  isReadOnly() {\n    return this.props.dataSource.readOnly === true;\n  }\n\n  renderIsReadOnlyMessage() {\n    return (\n      <div className=\"grafana-info-box span8\">\n        此数据源是由config添加的，无法使用UI进行修改。 请与您的服务器管理员联系以更新此数据源。\n      </div>\n    );\n  }\n\n  testDataSource() {\n    const { dataSource, testDataSource } = this.props;\n    testDataSource(dataSource.name);\n  }\n\n  get hasDataSource() {\n    return this.props.dataSource.id > 0;\n  }\n\n  renderLoadError(loadError: any) {\n    let showDelete = false;\n    let msg = loadError.toString();\n    if (loadError.data) {\n      if (loadError.data.message) {\n        msg = loadError.data.message;\n      }\n    } else if (isString(loadError)) {\n      showDelete = true;\n    }\n\n    const node = {\n      text: msg,\n      subTitle: '数据源错误',\n      icon: 'exclamation-triangle',\n    };\n    const nav = {\n      node: node,\n      main: node,\n    };\n\n    return (\n      <Page navModel={nav}>\n        <Page.Contents>\n          <div>\n            <div className=\"gf-form-button-row\">\n              {showDelete && (\n                <button type=\"submit\" className=\"btn btn-danger\" onClick={this.onDelete}>\n                  删除\n                </button>\n              )}\n              <a className=\"btn btn-inverse\" href=\"datasources\">\n                返回\n              </a>\n            </div>\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n\n  renderConfigPageBody(page: string) {\n    const { plugin } = this.props;\n    if (!plugin || !plugin.configPages) {\n      return null; // still loading\n    }\n\n    for (const p of plugin.configPages) {\n      if (p.id === page) {\n        return <p.body plugin={plugin} query={this.props.query} />;\n      }\n    }\n\n    return <div>网页未找到： {page}</div>;\n  }\n\n  renderSettings() {\n    const { dataSourceMeta, setDataSourceName, setIsDefault, dataSource, testingStatus, plugin } = this.props;\n\n    return (\n      <form onSubmit={this.onSubmit}>\n        {this.isReadOnly() && this.renderIsReadOnlyMessage()}\n        {dataSourceMeta.state && (\n          <div className=\"gf-form\">\n            <label className=\"gf-form-label width-10\">插件状态</label>\n            <label className=\"gf-form-label gf-form-label--transparent\">\n              <PluginStateinfo state={dataSourceMeta.state} />\n            </label>\n          </div>\n        )}\n\n        <BasicSettings\n          dataSourceName={dataSource.name}\n          isDefault={dataSource.isDefault}\n          onDefaultChange={state => setIsDefault(state)}\n          onNameChange={name => setDataSourceName(name)}\n        />\n\n        {plugin && (\n          <PluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={this.onModelChange}\n          />\n        )}\n\n        <div className=\"gf-form-group\">\n          {testingStatus && testingStatus.message && (\n            <div className={`alert-${testingStatus.status} alert`} aria-label={selectors.pages.DataSource.alert}>\n              <div className=\"alert-icon\">\n                {testingStatus.status === 'error' ? <Icon name=\"exclamation-triangle\" /> : <Icon name=\"check\" />}\n              </div>\n              <div className=\"alert-body\">\n                <div className=\"alert-title\" aria-label={selectors.pages.DataSource.alertMessage}>\n                  {testingStatus.message}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        <ButtonRow\n          onSubmit={event => this.onSubmit(event)}\n          isReadOnly={this.isReadOnly()}\n          onDelete={this.onDelete}\n          onTest={event => this.onTest(event)}\n        />\n      </form>\n    );\n  }\n\n  render() {\n    const { navModel, page, loadError } = this.props;\n\n    if (loadError) {\n      return this.renderLoadError(loadError);\n    }\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!this.hasDataSource}>\n          {this.hasDataSource ? <div>{page ? this.renderConfigPageBody(page) : this.renderSettings()}</div> : null}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const pageId = getRouteParamsId(state.location);\n  const dataSource = getDataSource(state.dataSources, pageId);\n  const page = state.location.query.page as string;\n  const { plugin, loadError, testingStatus } = state.dataSourceSettings;\n\n  return {\n    navModel: getNavModel(\n      state.navIndex,\n      page ? `datasource-page-${page}` : `datasource-settings-${pageId}`,\n      getDataSourceLoadingNav('settings')\n    ),\n    dataSource: getDataSource(state.dataSources, pageId),\n    dataSourceMeta: getDataSourceMeta(state.dataSources, dataSource.type),\n    pageId: pageId,\n    query: state.location.query,\n    page,\n    plugin,\n    loadError,\n    testingStatus,\n  };\n}\n\nconst mapDispatchToProps = {\n  deleteDataSource,\n  loadDataSource,\n  setDataSourceName,\n  updateDataSource,\n  setIsDefault,\n  dataSourceLoaded,\n  initDataSourceSettings,\n  testDataSource,\n};\n\nexport default hot(module)(\n  connectWithCleanUp(mapStateToProps, mapDispatchToProps, state => state.dataSourceSettings)(DataSourceSettingsPage)\n);\n","import React, { PureComponent } from 'react';\nimport _ from 'lodash';\nimport {\n  DataSourceSettings,\n  DataSourcePlugin,\n  DataSourcePluginMeta,\n  DataSourceApi,\n  DataQuery,\n  DataSourceJsonData,\n} from '@grafana/data';\nimport { getAngularLoader, AngularComponent } from '@grafana/runtime';\n\nexport type GenericDataSourcePlugin = DataSourcePlugin<DataSourceApi<DataQuery, DataSourceJsonData>>;\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class PluginSettings extends PureComponent<Props> {\n  element: any;\n  component: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: _.cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to apprach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = _.cloneDeep(this.props.dataSource);\n\n      this.component.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={element => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n\nexport default PluginSettings;\n","import React, { FC } from 'react';\nimport { AlphaNotice } from '@grafana/ui';\nimport { PluginState } from '@grafana/data';\nimport { css } from 'emotion';\n\ninterface Props {\n  state?: PluginState;\n}\n\nfunction getPluginStateInfoText(state?: PluginState): string | null {\n  switch (state) {\n    case PluginState.alpha:\n      return 'Alpha Plugin: This plugin is a work in progress and updates may include breaking changes';\n    case PluginState.beta:\n      return 'Beta Plugin: There could be bugs and minor breaking changes to this plugin';\n  }\n  return null;\n}\n\nconst PluginStateinfo: FC<Props> = props => {\n  const text = getPluginStateInfoText(props.state);\n\n  if (!text) {\n    return null;\n  }\n\n  return (\n    <AlphaNotice\n      state={props.state}\n      text={text}\n      className={css`\n        margin-left: 16px;\n      `}\n    />\n  );\n};\n\nexport default PluginStateinfo;\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxRA;AACA;AASA;AAWA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2CA;AACA;AACA;AA1CA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AAPA;AAQA;AACA;AAjBA;AAAA;AAAA;AAkBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAjCA;AAAA;AAAA;AAmCA;AACA;AACA;AACA;AAEA;AACA;AACA;AA1CA;AAAA;AAAA;AA6CA;AACA;AACA;AACA;AAhDA;AAAA;AAAA;AAsDA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAFA;AAMA;AAtEA;AACA;AADA;AAAA;AAyEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9FA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AACA;;;;A","sourceRoot":""}