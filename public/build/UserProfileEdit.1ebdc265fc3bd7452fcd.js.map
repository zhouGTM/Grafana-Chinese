{"version":3,"file":"UserProfileEdit.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/profile/UserOrganizations.tsx","webpack:////./public/app/features/profile/UserProfileEdit.tsx","webpack:////./public/app/features/profile/UserProfileEditForm.tsx","webpack:////./public/app/features/profile/UserSessions.tsx","webpack:////./public/app/features/profile/UserTeams.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { User, UserOrg } from 'app/types';\nimport { LoadingPlaceholder, Button } from '@grafana/ui';\n\nexport interface Props {\n  user: User;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  loadOrgs: () => void;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadOrgs();\n  }\n\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"加载组织...\" />;\n    }\n\n    return (\n      <>\n        {orgs.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">组织机构</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\">\n                <thead>\n                  <tr>\n                    <th>名字</th>\n                    <th>角色</th>\n                    <th />\n                  </tr>\n                </thead>\n                <tbody>\n                  {orgs.map((org: UserOrg, index) => {\n                    return (\n                      <tr key={index}>\n                        <td>{org.name}</td>\n                        <td>{org.role}</td>\n                        <td className=\"text-right\">\n                          {org.orgId === user.orgId ? (\n                            <span className=\"btn btn-primary btn-small\">当前</span>\n                          ) : (\n                            <Button\n                              variant=\"secondary\"\n                              size=\"sm\"\n                              onClick={() => {\n                                this.props.setUserOrg(org);\n                              }}\n                            >\n                              选择\n                            </Button>\n                          )}\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { config } from '@grafana/runtime';\nimport { NavModel } from '@grafana/data';\nimport { UserProvider, UserAPI, LoadingStates } from 'app/core/utils/UserProvider';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { User, Team, UserOrg, UserSession, StoreState } from 'app/types';\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport Page from 'app/core/components/Page/Page';\nimport { UserTeams } from './UserTeams';\nimport { UserSessions } from './UserSessions';\nimport { UserOrganizations } from './UserOrganizations';\nimport { UserProfileEditForm } from './UserProfileEditForm';\n\nexport interface Props {\n  navModel: NavModel;\n}\n\nexport const UserProfileEdit: FC<Props> = ({ navModel }) => (\n  <Page navModel={navModel}>\n    <UserProvider userId={config.bootData.user.id}>\n      {(api: UserAPI, states: LoadingStates, teams: Team[], orgs: UserOrg[], sessions: UserSession[], user: User) => {\n        return (\n          <Page.Contents>\n            {states.loadUser ? (\n              <LoadingPlaceholder text=\"加载用户资料...\" />\n            ) : (\n              <UserProfileEditForm\n                updateProfile={api.updateUserProfile}\n                isSavingUser={states.updateUserProfile}\n                user={user}\n              />\n            )}\n            <SharedPreferences resourceUri=\"user\" />\n            <UserTeams isLoading={states.loadTeams} loadTeams={api.loadTeams} teams={teams} />\n            {!states.loadUser && (\n              <>\n                <UserOrganizations\n                  isLoading={states.loadOrgs}\n                  setUserOrg={api.setUserOrg}\n                  loadOrgs={api.loadOrgs}\n                  orgs={orgs}\n                  user={user}\n                />\n                <UserSessions\n                  isLoading={states.loadSessions}\n                  loadSessions={api.loadSessions}\n                  revokeUserSession={api.revokeUserSession}\n                  sessions={sessions}\n                  user={user}\n                />\n              </>\n            )}\n          </Page.Contents>\n        );\n      }}\n    </UserProvider>\n  </Page>\n);\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'profile-settings'),\n  };\n}\n\nexport default hot(module)(connect(mapStateToProps, null)(UserProfileEdit));\n","import React, { FC } from 'react';\nimport { Button, Tooltip, Icon, Form, Input, Field, FieldSet } from '@grafana/ui';\nimport { User } from 'app/types';\nimport config from 'app/core/config';\nimport { ProfileUpdateFields } from 'app/core/utils/UserProvider';\n\nexport interface Props {\n  user: User;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm: FC<Props> = ({ user, isSavingUser, updateProfile }) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet label=\"编辑个人资料\">\n            <Field label=\"名字\" invalid={!!errors.name} error=\"名称为必填项\">\n              <Input name=\"name\" ref={register({ required: true })} placeholder=\"名字\" defaultValue={user.name} />\n            </Field>\n            <Field label=\"邮箱\" invalid={!!errors.email} error=\"邮箱为必填项\" disabled={disableLoginForm}>\n              <Input\n                name=\"email\"\n                ref={register({ required: true })}\n                placeholder=\"邮箱\"\n                defaultValue={user.email}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <Field label=\"用户名\" disabled={disableLoginForm}>\n              <Input\n                name=\"login\"\n                ref={register}\n                defaultValue={user.login}\n                placeholder=\"用户名\"\n                suffix={<InputSuffix />}\n              />\n            </Field>\n            <div className=\"gf-form-button-row\">\n              <Button variant=\"primary\" disabled={isSavingUser}>\n                保存\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix: FC = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"登录详细信息已锁定-在另一个系统中进行管理。\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import React, { PureComponent } from 'react';\nimport { User, UserSession } from 'app/types';\nimport { LoadingPlaceholder, Button, Icon } from '@grafana/ui';\n\nexport interface Props {\n  user: User;\n  sessions: UserSession[];\n  isLoading: boolean;\n  loadSessions: () => void;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nexport class UserSessions extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadSessions();\n  }\n\n  render() {\n    const { isLoading, sessions, revokeUserSession } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"加载会话...\" />;\n    }\n\n    return (\n      <>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">会话</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\">\n                <thead>\n                  <tr>\n                    <th>最后一次</th>\n                    <th>登陆</th>\n                    <th>IP地址</th>\n                    <th>浏览器 &amp; 系统信息</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>现在</td> : <td>{session.seenAt}</td>}\n                      <td>{session.createdAt}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button size=\"sm\" variant=\"destructive\" onClick={() => revokeUserSession(session.id)}>\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default UserSessions;\n","import React, { PureComponent } from 'react';\nimport { Team } from 'app/types';\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n  loadTeams: () => void;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadTeams();\n  }\n\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"加载团队...\" />;\n    }\n\n    return (\n      <>\n        {teams.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">团队</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\">\n                <thead>\n                  <tr>\n                    <th />\n                    <th>名字</th>\n                    <th>电子邮件</th>\n                    <th>成员</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {teams.map((team: Team, index) => {\n                    return (\n                      <tr key={index}>\n                        <td className=\"width-4 text-center\">\n                          <img className=\"filter-table__avatar\" src={team.avatarUrl} />\n                        </td>\n                        <td>{team.name}</td>\n                        <td>{team.email}</td>\n                        <td>{team.memberCount}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </>\n    );\n  }\n}\n\nexport default UserTeams;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAUA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAKA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAUA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AAaA;AAQA;AAzDA;AACA;AADA;AAAA;AA4DA;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAGA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAWA;AArCA;AACA;AAyCA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AASA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AACA;AAAA;AAAA;AAMA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AAEA;AAUA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAWA;AACA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAVA;AAsBA;AAnDA;AACA;AADA;AAAA;AAsDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AAEA;AAQA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAWA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AAQA;AA/CA;AACA;AADA;AAAA;AAkDA;;;;A","sourceRoot":""}