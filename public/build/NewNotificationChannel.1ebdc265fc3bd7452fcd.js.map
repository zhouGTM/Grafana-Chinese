{"version":3,"file":"NewNotificationChannel.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/alerting/NewNotificationChannelPage.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { NavModel } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Form } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { NotificationChannelForm } from './components/NotificationChannelForm';\nimport {\n  defaultValues,\n  mapChannelsToSelectableValue,\n  transformSubmitData,\n  transformTestData,\n} from './utils/notificationChannels';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { createNotificationChannel, loadNotificationTypes, testNotificationChannel } from './state/actions';\nimport { NotificationChannelType, NotificationChannelDTO, StoreState } from '../../types';\nimport { resetSecureField } from './state/reducers';\n\ninterface OwnProps {}\n\ninterface ConnectedProps {\n  navModel: NavModel;\n  notificationChannelTypes: NotificationChannelType[];\n}\n\ninterface DispatchProps {\n  createNotificationChannel: typeof createNotificationChannel;\n  loadNotificationTypes: typeof loadNotificationTypes;\n  testNotificationChannel: typeof testNotificationChannel;\n  resetSecureField: typeof resetSecureField;\n}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass NewNotificationChannelPage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadNotificationTypes();\n  }\n\n  onSubmit = (data: NotificationChannelDTO) => {\n    this.props.createNotificationChannel(transformSubmitData({ ...defaultValues, ...data }));\n  };\n\n  onTestChannel = (data: NotificationChannelDTO) => {\n    this.props.testNotificationChannel(transformTestData({ ...defaultValues, ...data }));\n  };\n\n  render() {\n    const { navModel, notificationChannelTypes } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <h2 className=\"page-sub-heading\">新的通知频道</h2>\n          <Form onSubmit={this.onSubmit} validateOn=\"onChange\" defaultValues={defaultValues} maxWidth={600}>\n            {({ register, errors, control, getValues, watch }) => {\n              const selectedChannel = notificationChannelTypes.find(c => c.value === getValues().type.value);\n\n              return (\n                <NotificationChannelForm\n                  selectableChannels={mapChannelsToSelectableValue(notificationChannelTypes)}\n                  selectedChannel={selectedChannel}\n                  onTestChannel={this.onTestChannel}\n                  register={register}\n                  errors={errors}\n                  getValues={getValues}\n                  control={control}\n                  watch={watch}\n                  imageRendererAvailable={config.rendererAvailable}\n                  resetSecureField={this.props.resetSecureField}\n                  secureFields={{}}\n                />\n              );\n            }}\n          </Form>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = state => {\n  return {\n    navModel: getNavModel(state.navIndex, 'channels'),\n    notificationChannelTypes: state.notificationChannel.notificationChannelTypes,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = {\n  createNotificationChannel,\n  loadNotificationTypes,\n  testNotificationChannel,\n  resetSecureField,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewNotificationChannelPage);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAiBA;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAXA;AACA;AACA;;;AAUA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAKA;;;;AA5CA;AACA;AA8CA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;;;;A","sourceRoot":""}