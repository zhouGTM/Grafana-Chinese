{"version":3,"file":"jaegerPlugin.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/plugins/datasource/jaeger/ConfigEditor.tsx","webpack:////./public/app/plugins/datasource/jaeger/QueryField.tsx","webpack:////./public/app/plugins/datasource/jaeger/datasource.ts","webpack:////./public/app/plugins/datasource/jaeger/module.ts"],"sourcesContent":["import React from 'react';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:16686'}\n        dataSourceConfig={options}\n        showAccessOptions={true}\n        onChange={onOptionsChange}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { JaegerDatasource, JaegerQuery } from './datasource';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\n\nimport { AppEvents, ExploreQueryFieldProps, TraceSpan, TraceData } from '@grafana/data';\nimport { appEvents } from '../../../core/core';\n\nconst ALL_OPERATIONS_KEY = '__ALL__';\nconst NO_TRACES_KEY = '__NO_TRACES__';\n\ntype Props = ExploreQueryFieldProps<JaegerDatasource, JaegerQuery>;\ninterface State {\n  serviceOptions: CascaderOption[];\n}\n\nfunction findRootSpan(spans: TraceSpan[]): TraceSpan | undefined {\n  return spans.find(s => !s.references?.length);\n}\n\nfunction getLabelFromTrace(trace: TraceData & { spans: TraceSpan[] }): string {\n  const rootSpan = findRootSpan(trace.spans);\n  if (rootSpan) {\n    return `${rootSpan.operationName} [${rootSpan.duration / 1000} ms]`;\n  }\n  return trace.traceID;\n}\n\nexport class JaegerQueryField extends React.PureComponent<Props, State> {\n  private _isMounted: boolean;\n\n  constructor(props: Props, context: React.Context<any>) {\n    super(props, context);\n    this.state = {\n      serviceOptions: [],\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n    // We should probably call this periodically to get new services after mount.\n    this.getServices();\n  }\n\n  componentWillUnmount(): void {\n    this._isMounted = false;\n  }\n\n  async getServices() {\n    const url = '/api/services';\n    const { datasource } = this.props;\n    try {\n      const services: string[] | null = await datasource.metadataRequest(url);\n      if (!this._isMounted) {\n        return;\n      }\n\n      if (services) {\n        const serviceOptions: CascaderOption[] = services.sort().map(service => ({\n          label: service,\n          value: service,\n          isLeaf: false,\n        }));\n        this.setState({ serviceOptions });\n      }\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, ['Failed to load services from Jaeger', error]);\n    }\n  }\n\n  onLoadOptions = async (selectedOptions: CascaderOption[]) => {\n    const service = selectedOptions[0].value;\n    if (selectedOptions.length === 1) {\n      // Load operations\n      const operations: string[] = await this.findOperations(service);\n      if (!this._isMounted) {\n        return;\n      }\n\n      const allOperationsOption: CascaderOption = {\n        label: '[所有]',\n        value: ALL_OPERATIONS_KEY,\n      };\n      const operationOptions: CascaderOption[] = [\n        allOperationsOption,\n        ...operations.sort().map(operation => ({\n          label: operation,\n          value: operation,\n          isLeaf: false,\n        })),\n      ];\n      this.setState(state => {\n        const serviceOptions = state.serviceOptions.map(serviceOption => {\n          if (serviceOption.value === service) {\n            return {\n              ...serviceOption,\n              children: operationOptions,\n            };\n          }\n          return serviceOption;\n        });\n        return { serviceOptions };\n      });\n    } else if (selectedOptions.length === 2) {\n      // Load traces\n      const operationValue = selectedOptions[1].value;\n      const operation = operationValue === ALL_OPERATIONS_KEY ? '' : operationValue;\n      const traces: any[] = await this.findTraces(service, operation);\n      if (!this._isMounted) {\n        return;\n      }\n\n      let traceOptions: CascaderOption[] = traces.map(trace => ({\n        label: getLabelFromTrace(trace),\n        value: trace.traceID,\n      }));\n      if (traceOptions.length === 0) {\n        traceOptions = [\n          {\n            label: '[时间范围内无痕迹]',\n            value: NO_TRACES_KEY,\n          },\n        ];\n      }\n      this.setState(state => {\n        // Place new traces into the correct service/operation sub-tree\n        const serviceOptions = state.serviceOptions.map(serviceOption => {\n          if (serviceOption.value === service && serviceOption.children) {\n            const operationOptions = serviceOption.children.map(operationOption => {\n              if (operationOption.value === operationValue) {\n                return {\n                  ...operationOption,\n                  children: traceOptions,\n                };\n              }\n              return operationOption;\n            });\n            return {\n              ...serviceOption,\n              children: operationOptions,\n            };\n          }\n          return serviceOption;\n        });\n        return { serviceOptions };\n      });\n    }\n  };\n\n  findOperations = async (service: string) => {\n    const { datasource } = this.props;\n    const url = `/api/services/${encodeURIComponent(service)}/operations`;\n    try {\n      return await datasource.metadataRequest(url);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, ['无法从Jaeger加载操作', error]);\n    }\n    return [];\n  };\n\n  findTraces = async (service: string, operation?: string) => {\n    const { datasource } = this.props;\n    const { start, end } = datasource.getTimeRange();\n\n    const traceSearch = {\n      start,\n      end,\n      service,\n      operation,\n      limit: 10,\n      lookback: '1h',\n      maxDuration: '',\n      minDuration: '',\n    };\n    const url = '/api/traces';\n    try {\n      return await datasource.metadataRequest(url, traceSearch);\n    } catch (error) {\n      appEvents.emit(AppEvents.alertError, ['无法从Jaeger加载跟踪', error]);\n    }\n    return [];\n  };\n\n  onSelectTrace = (values: string[], selectedOptions: CascaderOption[]) => {\n    const { query, onChange, onRunQuery } = this.props;\n    if (selectedOptions.length === 3) {\n      const traceID = selectedOptions[2].value;\n      onChange({ ...query, query: traceID });\n      onRunQuery();\n    }\n  };\n\n  render() {\n    const { query, onChange } = this.props;\n    const { serviceOptions } = this.state;\n    const cascaderOptions = serviceOptions && serviceOptions.length ? serviceOptions : noTracesFoundOptions;\n\n    return (\n      <>\n        <div className=\"gf-form-inline gf-form-inline--nowrap\">\n          <div className=\"gf-form flex-shrink-0\">\n            <ButtonCascader options={cascaderOptions} onChange={this.onSelectTrace} loadData={this.onLoadOptions}>\n              追踪\n            </ButtonCascader>\n          </div>\n          <div className=\"gf-form gf-form--grow flex-shrink-1\">\n            <div className={'slate-query-field__wrapper'}>\n              <div className=\"slate-query-field\">\n                <input\n                  style={{ width: '100%' }}\n                  value={query.query || ''}\n                  onChange={e =>\n                    onChange({\n                      ...query,\n                      query: e.currentTarget.value,\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst noTracesFoundOptions = [\n  {\n    label: '没有发现踪迹',\n    value: 'no_traces',\n    isLeaf: true,\n\n    // Cannot be disabled because then cascader shows 'loading' for some reason.\n    // disabled: true,\n  },\n];\n\nexport default JaegerQueryField;\n","import {\n  dateMath,\n  DateTime,\n  MutableDataFrame,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataQuery,\n  FieldType,\n} from '@grafana/data';\nimport { getBackendSrv, BackendSrvRequest } from '@grafana/runtime';\nimport { Observable, from, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { serializeParams } from 'app/core/utils/fetch';\n\nexport type JaegerQuery = {\n  query: string;\n} & DataQuery;\n\nexport class JaegerDatasource extends DataSourceApi<JaegerQuery> {\n  constructor(private instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await this._request(url, params, { hideFromInspector: true }).toPromise();\n    return res.data.data;\n  }\n\n  query(options: DataQueryRequest<JaegerQuery>): Observable<DataQueryResponse> {\n    // At this moment we expect only one target. In case we somehow change the UI to be able to show multiple\n    // traces at one we need to change this.\n    const id = options.targets[0]?.query;\n    if (id) {\n      // TODO: this api is internal, used in jaeger ui. Officially they have gRPC api that should be used.\n      return this._request(`/api/traces/${encodeURIComponent(id)}`).pipe(\n        map(response => {\n          return {\n            data: [\n              new MutableDataFrame({\n                fields: [\n                  {\n                    name: 'trace',\n                    type: FieldType.trace,\n                    values: response?.data?.data || [],\n                  },\n                ],\n                meta: {\n                  preferredVisualisationType: 'trace',\n                },\n              }),\n            ],\n          };\n        })\n      );\n    } else {\n      return of({\n        data: [\n          new MutableDataFrame({\n            fields: [\n              {\n                name: 'trace',\n                type: FieldType.trace,\n                values: [],\n              },\n            ],\n            meta: {\n              preferredVisualisationType: 'trace',\n            },\n          }),\n        ],\n      });\n    }\n  }\n\n  async testDatasource(): Promise<any> {\n    return true;\n  }\n\n  getTimeRange(): { start: number; end: number } {\n    const range = getTimeSrv().timeRange();\n    return {\n      start: getTime(range.from, false),\n      end: getTime(range.to, true),\n    };\n  }\n\n  getQueryDisplayText(query: JaegerQuery) {\n    return query.query;\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    // Hack for proxying metadata requests\n    const baseUrl = `/api/datasources/proxy/${this.instanceSettings.id}`;\n    const params = data ? serializeParams(data) : '';\n    const url = `${baseUrl}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return from(getBackendSrv().datasourceRequest(req));\n  }\n}\n\nfunction getTime(date: string | DateTime, roundUp: boolean) {\n  if (typeof date === 'string') {\n    date = dateMath.parse(date, roundUp)!;\n  }\n  return date.valueOf() * 1000;\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { JaegerDatasource } from './datasource';\nimport { JaegerQueryField } from './QueryField';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport const plugin = new DataSourcePlugin(JaegerDatasource)\n  .setConfigEditor(ConfigEditor)\n  .setExploreQueryField(JaegerQueryField);\n"],"mappings":"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","sourceRoot":""}