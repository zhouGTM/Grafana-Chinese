{"version":3,"file":"cloudMonitoringPlugin.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack:////./public/app/plugins/datasource/cloud-monitoring/annotations_query_ctrl.ts","webpack:////./public/app/plugins/datasource/cloud-monitoring/api.ts","webpack:////./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack:////./public/app/plugins/datasource/cloud-monitoring/config_ctrl.ts","webpack:////./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack:////./public/app/plugins/datasource/cloud-monitoring/module.ts"],"sourcesContent":["import isString from 'lodash/isString';\nimport { alignmentPeriods, ValueTypes, MetricKind, selectors } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { MetricFindQueryTypes, VariableQueryData } from './types';\nimport { SelectableValue } from '@grafana/data';\nimport {\n  getMetricTypesByService,\n  getAlignmentOptionsByMetric,\n  getAggregationOptionsByMetric,\n  extractServicesFromMetricDescriptors,\n  getLabelKeys,\n} from './functions';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: VariableQueryData) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: VariableQueryData) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: any[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map(s => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: VariableQueryData) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s: any) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, [labelKey]);\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type'].map(this.toFindQueryResult);\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: VariableQueryData) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m: any) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: VariableQueryData) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: VariableQueryData) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return selectors.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return alignmentPeriods.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { TemplateSrv } from 'app/features/templating/template_srv';\nimport { AnnotationTarget } from './types';\n\nexport class CloudMonitoringAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  annotation: any;\n  templateSrv: TemplateSrv;\n\n  /** @ngInject */\n  constructor() {\n    this.annotation.target = this.annotation.target || {};\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import appEvents from 'app/core/app_events';\nimport { CoreEvents } from 'app/types';\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { formatCloudMonitoringError } from './functions';\nimport { MetricDescriptor } from './types';\n\ninterface Options {\n  responseMap?: (res: any) => SelectableValue<string> | MetricDescriptor;\n  baseUrl?: string;\n  useCache?: boolean;\n}\n\nexport default class Api {\n  cache: { [key: string]: Array<SelectableValue<string>> };\n  defaultOptions: Options;\n\n  constructor(private baseUrl: string) {\n    this.cache = {};\n    this.defaultOptions = {\n      useCache: true,\n      responseMap: (res: any) => res,\n      baseUrl: this.baseUrl,\n    };\n  }\n\n  async get(path: string, options?: Options): Promise<Array<SelectableValue<string>> | MetricDescriptor[]> {\n    try {\n      const { useCache, responseMap, baseUrl } = { ...this.defaultOptions, ...options };\n\n      if (useCache && this.cache[path]) {\n        return this.cache[path];\n      }\n\n      const response = await getBackendSrv().datasourceRequest({\n        url: baseUrl + path,\n        method: 'GET',\n      });\n\n      const responsePropName = path.match(/([^\\/]*)\\/*$/)![1];\n      let res = [];\n      if (response && response.data && response.data[responsePropName]) {\n        res = response.data[responsePropName].map(responseMap);\n      }\n\n      if (useCache) {\n        this.cache[path] = res;\n      }\n\n      return res;\n    } catch (error) {\n      appEvents.emit(CoreEvents.dsRequestError, { error: { data: { error: formatCloudMonitoringError(error) } } });\n      return [];\n    }\n  }\n\n  async post(data: { [key: string]: any }) {\n    return getBackendSrv().datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data,\n    });\n  }\n\n  async test(projectName: string) {\n    return getBackendSrv().datasourceRequest({\n      url: `${this.baseUrl}${projectName}/metricDescriptors`,\n      method: 'GET',\n    });\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { VariableQueryProps } from 'app/types/plugins';\nimport { SimpleSelect } from './';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport { MetricFindQueryTypes, VariableQueryData } from '../types';\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<VariableQueryProps, VariableQueryData> {\n  queryTypes: Array<{ value: string; name: string }> = [\n    { value: MetricFindQueryTypes.Projects, name: 'Projects' },\n    { value: MetricFindQueryTypes.Services, name: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, name: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, name: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, name: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, name: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, name: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, name: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, name: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, name: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, name: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, name: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: VariableQueryProps) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = await this.props.datasource.getProjects();\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      name: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some(s => s.value === this.props.templateSrv.replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects: projects.map(({ value, label }: any) => ({ value, name: label })),\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    const query = this.queryTypes.find(q => q.value === this.state.selectedQueryType)!;\n    this.props.onChange(queryModel, `Google Cloud Monitoring - ${query.name}`);\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState({\n      ...labels,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projectName,\n      sloServices: sloServices.map(({ value, label }: any) => ({ value, name: label })),\n    });\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      this.props.templateSrv.replace(this.state.selectedMetricType),\n      this.props.templateSrv.replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state);\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<VariableQueryProps>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some(l => l === this.props.templateSrv.replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  insertTemplateVariables(options: any) {\n    const templateVariables = this.props.templateSrv.getVariables().map((v: any) => ({\n      name: `$${v.name}`,\n      value: `$${v.name}`,\n    }));\n    return [...templateVariables, ...options];\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"项目\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"服务\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"项目\"\n            />\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"服务\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"指标类型\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <SimpleSelect\n                value={this.state.labelKey}\n                options={this.insertTemplateVariables(this.state.labels.map(l => ({ value: l, name: l })))}\n                onValueChange={e => this.onLabelKeyChange(e.target.value)}\n                label=\"标签键\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.selectedService}\n              options={this.insertTemplateVariables(this.state.services)}\n              onValueChange={e => this.onServiceChange(e.target.value)}\n              label=\"服务\"\n            />\n            <SimpleSelect\n              value={this.state.selectedMetricType}\n              options={this.insertTemplateVariables(this.state.metricTypes)}\n              onValueChange={e => this.onMetricTypeChange(e.target.value)}\n              label=\"指标类型\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"项目\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <SimpleSelect\n              value={this.state.projectName}\n              options={this.insertTemplateVariables(this.state.projects)}\n              onValueChange={e => this.onProjectChange(e.target.value)}\n              label=\"项目\"\n            />\n            <SimpleSelect\n              value={this.state.selectedSLOService}\n              options={this.insertTemplateVariables(this.state.sloServices)}\n              onValueChange={e => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: e.target.value,\n                });\n              }}\n              label=\"SLO服务\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">查询类型</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>加载...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <SimpleSelect\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onValueChange={e => this.onQueryTypeChange(e.target.value)}\n          label=\"查询类型\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import DatasourceSrv from 'app/features/plugins/datasource_srv';\nimport { AuthType, authTypes } from './types';\n\nexport interface JWT {\n  private_key: string;\n  token_uri: string;\n  client_email: string;\n  project_id: string;\n}\n\nexport class CloudMonitoringConfigCtrl {\n  static templateUrl = 'public/app/plugins/datasource/cloud-monitoring/partials/config.html';\n  datasourceSrv: DatasourceSrv;\n  current: any;\n  meta: any;\n  jsonText: string;\n  validationErrors: string[] = [];\n  inputDataValid: boolean;\n  authenticationTypes: Array<{ key: AuthType; value: string }>;\n  defaultAuthenticationType: string;\n  name: string;\n\n  /** @ngInject */\n  constructor(datasourceSrv: DatasourceSrv) {\n    this.defaultAuthenticationType = AuthType.JWT;\n    this.datasourceSrv = datasourceSrv;\n    this.name = this.meta.name;\n    this.current.jsonData = this.current.jsonData || {};\n    this.current.jsonData.authenticationType = this.current.jsonData.authenticationType\n      ? this.current.jsonData.authenticationType\n      : this.defaultAuthenticationType;\n    this.current.secureJsonData = this.current.secureJsonData || {};\n    this.current.secureJsonFields = this.current.secureJsonFields || {};\n    this.authenticationTypes = authTypes;\n  }\n\n  save(jwt: JWT) {\n    this.current.secureJsonData.privateKey = jwt.private_key;\n    this.current.jsonData.tokenUri = jwt.token_uri;\n    this.current.jsonData.clientEmail = jwt.client_email;\n    this.current.jsonData.defaultProject = jwt.project_id;\n  }\n\n  validateJwt(jwt: JWT) {\n    this.resetValidationMessages();\n    if (!jwt.private_key || jwt.private_key.length === 0) {\n      this.validationErrors.push('Private key field missing in JWT file.');\n    }\n\n    if (!jwt.token_uri || jwt.token_uri.length === 0) {\n      this.validationErrors.push('Token URI field missing in JWT file.');\n    }\n\n    if (!jwt.client_email || jwt.client_email.length === 0) {\n      this.validationErrors.push('Client Email field missing in JWT file.');\n    }\n\n    if (!jwt.project_id || jwt.project_id.length === 0) {\n      this.validationErrors.push('Project Id field missing in JWT file.');\n    }\n\n    if (this.validationErrors.length === 0) {\n      this.inputDataValid = true;\n      return true;\n    }\n\n    return false;\n  }\n\n  onUpload(json: JWT) {\n    this.jsonText = '';\n    if (this.validateJwt(json)) {\n      this.save(json);\n    }\n  }\n\n  onPasteJwt(e: any) {\n    try {\n      const json = JSON.parse(e.originalEvent.clipboardData.getData('text/plain') || this.jsonText);\n      if (this.validateJwt(json)) {\n        this.save(json);\n      }\n    } catch (error) {\n      this.resetValidationMessages();\n      this.validationErrors.push(`Invalid json: ${error.message}`);\n    }\n  }\n\n  resetValidationMessages() {\n    this.validationErrors = [];\n    this.inputDataValid = false;\n    this.jsonText = '';\n\n    this.current.jsonData = Object.assign({}, { authenticationType: this.current.jsonData.authenticationType });\n    this.current.secureJsonData = {};\n    this.current.secureJsonFields = {};\n  }\n}\n","import _ from 'lodash';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponseData,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n  toDataFrame,\n} from '@grafana/data';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport {\n  CloudMonitoringQuery,\n  MetricDescriptor,\n  CloudMonitoringOptions,\n  Filter,\n  VariableQueryData,\n  QueryType,\n} from './types';\nimport { cloudMonitoringUnitMappings } from './constants';\nimport API from './api';\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\n\nexport default class CloudMonitoringDatasource extends DataSourceApi<CloudMonitoringQuery, CloudMonitoringOptions> {\n  api: API;\n  authenticationType: string;\n\n  /** @ngInject */\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv,\n    private timeSrv: TimeSrv\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.api = new API(`${instanceSettings.url!}/cloudmonitoring/v3/projects/`);\n  }\n\n  get variables() {\n    return this.templateSrv.getVariables().map(v => `$${v.name}`);\n  }\n\n  async query(options: DataQueryRequest<CloudMonitoringQuery>): Promise<DataQueryResponseData> {\n    const result: DataQueryResponseData[] = [];\n    const data = await this.getTimeSeries(options);\n    if (data.results) {\n      Object.values(data.results).forEach((queryRes: any) => {\n        if (!queryRes.series) {\n          return;\n        }\n        const unit = this.resolvePanelUnitFromTargets(options.targets);\n        queryRes.series.forEach((series: any) => {\n          let timeSerie: any = {\n            target: series.name,\n            datapoints: series.points,\n            refId: queryRes.refId,\n            meta: queryRes.meta,\n          };\n          if (unit) {\n            timeSerie = { ...timeSerie, unit };\n          }\n          const df = toDataFrame(timeSerie);\n\n          for (const field of df.fields) {\n            if (queryRes.meta?.deepLink && queryRes.meta?.deepLink.length > 0) {\n              field.config.links = [\n                {\n                  url: queryRes.meta?.deepLink,\n                  title: 'View in Metrics Explorer',\n                  targetBlank: true,\n                },\n              ];\n            }\n          }\n          result.push(df);\n        });\n      });\n      return { data: result };\n    } else {\n      return { data: [] };\n    }\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasourceId: this.id,\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        tags: this.templateSrv.replace(annotation.target.tags, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    const { data } = await this.api.post({\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries,\n    });\n\n    const results = data.results['annotationQuery'].tables[0].rows.map((v: any) => {\n      return {\n        annotation: annotation,\n        time: Date.parse(v[0]),\n        title: v[1],\n        tags: [],\n        text: v[3],\n      } as any;\n    });\n\n    return results;\n  }\n\n  async metricFindQuery(query: VariableQueryData) {\n    await this.ensureGCEDefaultProject();\n    const cloudMonitoringMetricFindQuery = new CloudMonitoringMetricFindQuery(this);\n    return cloudMonitoringMetricFindQuery.execute(query);\n  }\n\n  async getTimeSeries(options: DataQueryRequest<CloudMonitoringQuery>) {\n    await this.ensureGCEDefaultProject();\n    const queries = options.targets\n      .map(this.migrateQuery)\n      .filter(this.shouldRunQuery)\n      .map(q => this.prepareTimeSeriesQuery(q, options.scopedVars))\n      .map(q => ({ ...q, intervalMs: options.intervalMs, type: 'timeSeriesQuery' }));\n\n    if (queries.length > 0) {\n      const { data } = await this.api.post({\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries,\n      });\n      return data;\n    } else {\n      return { results: [] };\n    }\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, groupBys?: string[]) {\n    const response = await this.getTimeSeries({\n      targets: [\n        {\n          refId,\n          datasourceId: this.id,\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(groupBys || [], {}),\n            crossSeriesReducer: 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>);\n    const result = response.results[refId];\n    return result && result.meta ? result.meta.labels : {};\n  }\n\n  async testDatasource() {\n    let status, message;\n    const defaultErrorMessage = 'Cannot connect to Google Cloud Monitoring API';\n    try {\n      await this.ensureGCEDefaultProject();\n      const response = await this.api.test(this.getDefaultProject());\n      if (response.status === 200) {\n        status = 'success';\n        message = 'Successfully queried the Google Cloud Monitoring API.';\n      } else {\n        status = 'error';\n        message = response.statusText ? response.statusText : defaultErrorMessage;\n      }\n    } catch (error) {\n      status = 'error';\n      if (_.isString(error)) {\n        message = error;\n      } else {\n        message = 'Google Cloud Monitoring: ';\n        message += error.statusText ? error.statusText : defaultErrorMessage;\n        if (error.data && error.data.error && error.data.error.code) {\n          message += ': ' + error.data.error.code + '. ' + error.data.error.message;\n        }\n      }\n    } finally {\n      return {\n        status,\n        message,\n      };\n    }\n  }\n\n  async getGCEDefaultProject() {\n    return this.api\n      .post({\n        queries: [\n          {\n            refId: 'getGCEDefaultProject',\n            type: 'getGCEDefaultProject',\n            datasourceId: this.id,\n          },\n        ],\n      })\n      .then(({ data }) => {\n        return data && data.results && data.results.getGCEDefaultProject && data.results.getGCEDefaultProject.meta\n          ? data.results.getGCEDefaultProject.meta.defaultProject\n          : '';\n      })\n      .catch(err => {\n        throw err.data.error;\n      });\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.api.get(`${this.templateSrv.replace(projectName)}/metricDescriptors`, {\n      responseMap: (m: any) => {\n        const [service] = m.type.split('/');\n        const [serviceShortName] = service.split('.');\n        m.service = service;\n        m.serviceShortName = serviceShortName;\n        m.displayName = m.displayName || m.type;\n\n        return m;\n      },\n    }) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.api.get(`${this.templateSrv.replace(projectName)}/services`, {\n      responseMap: ({ name }: { name: string }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: name.match(/([^\\/]*)\\/*$/)![1],\n      }),\n    });\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.api.get(`${p}/services/${s}/serviceLevelObjectives`, {\n      responseMap: ({ name, displayName, goal }: { name: string; displayName: string; goal: number }) => ({\n        value: name.match(/([^\\/]*)\\/*$/)![1],\n        label: displayName,\n        goal,\n      }),\n    });\n  }\n\n  async getProjects() {\n    return this.api.get(`projects`, {\n      responseMap: ({ projectId, name }: { projectId: string; name: string }) => ({\n        value: projectId,\n        label: name,\n      }),\n      baseUrl: `${this.instanceSettings.url!}/cloudresourcemanager/v1/`,\n    });\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, ...rest } = query as any;\n      return {\n        refId,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && _.isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  shouldRunQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  prepareTimeSeriesQuery(\n    { metricQuery, refId, queryType, sloQuery }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): CloudMonitoringQuery {\n    return {\n      datasourceId: this.id,\n      refId,\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject()\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(query => this.prepareTimeSeriesQuery(query, scopedVars));\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter = _.chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .reduce((res, filter) => (filter.value ? [...res, filter] : res), []);\n\n    const filterArray = _.flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, 'regex'),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach(gb => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n\n  resolvePanelUnitFromTargets(targets: any) {\n    let unit;\n    if (targets.length > 0 && targets.every((t: any) => t.unit === targets[0].unit)) {\n      if (cloudMonitoringUnitMappings.hasOwnProperty(targets[0].unit!)) {\n        // @ts-ignore\n        unit = cloudMonitoringUnitMappings[targets[0].unit];\n      }\n    }\n    return unit;\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport CloudMonitoringDatasource from './datasource';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringConfigCtrl } from './config_ctrl';\nimport { CloudMonitoringAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditor(QueryEditor)\n  .setConfigCtrl(CloudMonitoringConfigCtrl)\n  .setAnnotationQueryCtrl(CloudMonitoringAnnotationsQueryCtrl)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAEA;AACA;AAOA;;;AACA;AAAA;AACA;AADA;AAAA;AACA;;;;;;AACA;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;AACA;AACA;;;;;;;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;AACA;AACA;;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AAAA;;;;;AACA;AACA;;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AACA;AAAA;;;;;AACA;AACA;;;AACA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAAA;;;;;AACA;AACA;;AACA;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAAA;;;;;AACA;AACA;;AACA;;AACA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAAA;;;;;AACA;AACA;;;AACA;AACA;;AADA;AACA;AACA;AAAA;AACA;AAEA;;;;;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAAA;;;;;AACA;AACA;;;AAEA;AACA;;AADA;AACA;AACA;AAAA;AACA;AAEA;;;;;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;AACA;;AADA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA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ACA;AAYA;AACA;AAxGA;AA0GA;AAzRA;AAAA;AAAA;AA2RA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AASA;AApTA;AACA;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;ACLA;AASA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAzBA;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAkCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzDA;AAAA;AAAA;AA4DA;AACA;AAAA;AACA;AACA;AACA;AAhEA;AAAA;AAAA;AAmEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5EA;AAAA;AAAA;AA+EA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAtFA;AACA;AADA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;AAEA;AAYA;AAQA;AACA;AACA;AACA;AACA;;;;;;;AAIA;AACA;AAIA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAEA;AACA;AAHA;AAIA;AACA;;;;;;AAKA;;;;;;;;AACA;;AACA;AACA;;AADA;AACA;AAAA;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAVA;AAAA;AAAA;AACA;AADA;AAYA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AACA;AACA;AACA;AAAA;AAAA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;AACA;AACA;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAfA;;AAmBA;AACA;AACA;AACA;AAHA;AACA;;;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;AACA;AACA;;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;;;AADA;AAKA;AACA;;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAaA;AAfA;AACA;;AADA;AAiBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;AAEA;AACA;;;AAAA;AACA;;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAFA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;AAEA;AAEA;AACA;AACA;AAHA;AAFA;AASA;AACA;AAGA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AAGA;AACA;AAAA;;;;;;AACA;AACA;;AADA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;AACA;;;;;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AATA;AACA;;;;;;;;;;;;;;;;;;;;AAYA;;;;;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AADA;AACA;;;;;;;;;;;;;;;;;;;;AAOA;;;;;;;AACA;;;;;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AADA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AASA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AALA;AACA;;;;;;;;;;;;;;;;;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAJA;AASA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AATA;AAYA;AACA;;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAPA;AASA;AAbA;AAeA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAIA;AAAA;AAJA;AAMA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AA5WA;AACA;AAAA;AAAA;AACA;;;;AAjBA;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;A","sourceRoot":""}