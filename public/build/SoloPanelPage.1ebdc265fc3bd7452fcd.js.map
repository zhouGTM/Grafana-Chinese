{"version":3,"file":"SoloPanelPage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["// Libraries\nimport React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { connect } from 'react-redux';\n\n// Components\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\n\n// Redux\nimport { initDashboard } from '../state/initDashboard';\n\n// Types\nimport { StoreState, DashboardRouteInfo } from 'app/types';\nimport { PanelModel, DashboardModel } from 'app/features/dashboard/state';\n\ninterface Props {\n  urlPanelId: string;\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  $scope: any;\n  $injector: any;\n  routeInfo: DashboardRouteInfo;\n  initDashboard: typeof initDashboard;\n  dashboard: DashboardModel | null;\n}\n\ninterface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { $injector, $scope, urlUid, urlType, urlSlug, routeInfo } = this.props;\n\n    this.props.initDashboard({\n      $injector: $injector,\n      $scope: $scope,\n      urlSlug: urlSlug,\n      urlUid: urlUid,\n      urlType: urlType,\n      routeInfo: routeInfo,\n      fixUrl: false,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { urlPanelId, dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got the dashboard!\n    if (!prevProps.dashboard) {\n      const panelId = parseInt(urlPanelId, 10);\n\n      // need to expand parent row if this panel is inside a row\n      dashboard.expandParentRowFor(panelId);\n\n      const panel = dashboard.getPanelById(panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      this.setState({ panel });\n    }\n  }\n\n  render() {\n    const { urlPanelId, dashboard } = this.props;\n    const { notFound, panel } = this.state;\n\n    if (notFound) {\n      return <div className=\"alert alert-error\">找不到ID为 {urlPanelId} 的面板</div>;\n    }\n\n    if (!panel || !dashboard) {\n      return <div>加载和初始化仪表板</div>;\n    }\n\n    return (\n      <div className=\"panel-solo\">\n        <DashboardPanel dashboard={dashboard} panel={panel} isEditing={false} isViewing={false} isInView={true} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  urlUid: state.location.routeParams.uid,\n  urlSlug: state.location.routeParams.slug,\n  urlType: state.location.routeParams.type,\n  urlPanelId: state.location.query.panelId,\n  dashboard: state.dashboard.getModel() as DashboardModel,\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(SoloPanelPage));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAsBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AACA;AAFA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAlBA;AAAA;AAAA;AAoBA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AA3CA;AAAA;AAAA;AA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AA9DA;AACA;AADA;AAAA;AACA;AAgEA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AACA;AAOA;AACA;AADA;AAIA;;;;;A","sourceRoot":""}