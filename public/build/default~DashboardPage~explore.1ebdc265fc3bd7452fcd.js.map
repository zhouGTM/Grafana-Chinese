{"version":3,"file":"default~DashboardPage~explore.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/core/components/Select/DataSourcePicker.tsx","webpack:////./public/app/features/dashboard/components/Inspector/InspectStatsTab.tsx","webpack:////./public/app/features/dashboard/components/Inspector/InspectStatsTable.tsx","webpack:////./public/app/features/dashboard/components/Inspector/styles.ts"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\n// Components\nimport { Select } from '@grafana/ui';\nimport { SelectableValue, DataSourceSelectItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface Props {\n  onChange: (ds: DataSourceSelectItem) => void;\n  datasources: DataSourceSelectItem[];\n  current?: DataSourceSelectItem | null;\n  hideTextValue?: boolean;\n  onBlur?: () => void;\n  autoFocus?: boolean;\n  openMenuOnFocus?: boolean;\n  showLoading?: boolean;\n  placeholder?: string;\n  invalid?: boolean;\n}\n\nexport class DataSourcePicker extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    autoFocus: false,\n    openMenuOnFocus: false,\n    placeholder: '选择数据源',\n  };\n\n  searchInput: HTMLElement;\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onChange = (item: SelectableValue<string>) => {\n    const ds = this.props.datasources.find(ds => ds.name === item.value);\n\n    if (ds) {\n      this.props.onChange(ds);\n    }\n  };\n\n  render() {\n    const {\n      datasources,\n      current,\n      autoFocus,\n      hideTextValue,\n      onBlur,\n      openMenuOnFocus,\n      showLoading,\n      placeholder,\n      invalid,\n    } = this.props;\n\n    const options = datasources.map(ds => ({\n      value: ds.name,\n      label: ds.name,\n      imgUrl: ds.meta.info.logos.small,\n    }));\n\n    const value = current && {\n      label: current.name.substr(0, 37),\n      value: current.name,\n      imgUrl: current.meta.info.logos.small,\n      loading: showLoading,\n      hideText: hideTextValue,\n    };\n\n    return (\n      <div aria-label={selectors.components.DataSourcePicker.container}>\n        <Select\n          className=\"ds-picker select-container\"\n          isMulti={false}\n          isClearable={false}\n          backspaceRemovesValue={false}\n          onChange={this.onChange}\n          options={options}\n          autoFocus={autoFocus}\n          onBlur={onBlur}\n          openMenuOnFocus={openMenuOnFocus}\n          maxMenuHeight={500}\n          menuPlacement=\"bottom\"\n          placeholder={placeholder}\n          noOptionsMessage=\"No datasources found\"\n          value={value}\n          invalid={invalid}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DataSourcePicker;\n","import { PanelData, QueryResultMetaStat, TimeZone } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InspectStatsTable } from './InspectStatsTable';\nimport React from 'react';\n\ninterface InspectStatsTabProps {\n  data: PanelData;\n  timeZone: TimeZone;\n}\n\nexport const InspectStatsTab: React.FC<InspectStatsTabProps> = ({ data, timeZone }) => {\n  if (!data.request) {\n    return null;\n  }\n\n  let stats: QueryResultMetaStat[] = [];\n\n  const requestTime = data.request.endTime ? data.request.endTime - data.request.startTime : -1;\n  const processingTime = data.timings?.dataProcessingTime || -1;\n  let dataRows = 0;\n\n  for (const frame of data.series) {\n    dataRows += frame.length;\n  }\n\n  if (requestTime > 0) {\n    stats.push({ displayName: '总请求时间', value: requestTime, unit: 'ms' });\n  }\n  if (processingTime > 0) {\n    stats.push({ displayName: '数据处理时间', value: processingTime, unit: 'ms' });\n  }\n  stats.push({ displayName: '查询数量', value: data.request.targets.length });\n  stats.push({ displayName: '总行数', value: dataRows });\n\n  let dataStats: QueryResultMetaStat[] = [];\n\n  for (const series of data.series) {\n    if (series.meta && series.meta.stats) {\n      dataStats = dataStats.concat(series.meta.stats);\n    }\n  }\n\n  return (\n    <div aria-label={selectors.components.PanelInspector.Stats.content}>\n      <InspectStatsTable timeZone={timeZone} name={'统计'} stats={stats} />\n      <InspectStatsTable timeZone={timeZone} name={'数据源统计'} stats={dataStats} />\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme,\n  QueryResultMetaStat,\n  TimeZone,\n} from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { stylesFactory, useTheme } from '@grafana/ui';\nimport { css } from 'emotion';\n\ninterface InspectStatsTableProps {\n  timeZone: TimeZone;\n  name: string;\n  stats: QueryResultMetaStat[];\n}\n\nexport const InspectStatsTable: React.FC<InspectStatsTableProps> = ({ timeZone, name, stats }) => {\n  const theme = useTheme();\n  const styles = getStyles(theme);\n\n  if (!stats || !stats.length) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className=\"section-heading\">{name}</div>\n      <table className=\"filter-table width-30\">\n        <tbody>\n          {stats.map((stat, index) => {\n            return (\n              <tr key={`${stat.displayName}-${index}`}>\n                <td>{stat.displayName}</td>\n                <td className={styles.cell}>{formatStat(stat, timeZone)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nfunction formatStat(stat: QueryResultMetaStat, timeZone?: TimeZone): string {\n  const display = getDisplayProcessor({\n    field: {\n      type: FieldType.number,\n      config: stat,\n    },\n    theme: config.theme,\n    timeZone,\n  });\n  return formattedValueToString(display(stat.value));\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      padding-bottom: ${theme.spacing.md};\n    `,\n    cell: css`\n      text-align: right;\n    `,\n  };\n});\n","import { css } from 'emotion';\nimport { config } from 'app/core/config';\nimport { stylesFactory } from '@grafana/ui';\n\nexport const getPanelInspectorStyles = stylesFactory(() => {\n  return {\n    wrap: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n      flex: 1 1 0;\n    `,\n    toolbar: css`\n      display: flex;\n      width: 100%;\n      flex-grow: 0;\n      align-items: center;\n      justify-content: flex-end;\n      margin-bottom: ${config.theme.spacing.sm};\n    `,\n    toolbarItem: css`\n      margin-left: ${config.theme.spacing.md};\n    `,\n    content: css`\n      flex-grow: 1;\n      padding-bottom: 16px;\n    `,\n    contentQueryInspector: css`\n      flex-grow: 1;\n      padding: ${config.theme.spacing.md} 0;\n    `,\n    editor: css`\n      font-family: monospace;\n      height: 100%;\n      flex-grow: 1;\n    `,\n    viewer: css`\n      overflow: scroll;\n    `,\n    dataFrameSelect: css`\n      flex-grow: 2;\n    `,\n    tabContent: css`\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    dataTabContent: css`\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n      width: 100%;\n    `,\n    actionsWrapper: css`\n      display: flex;\n    `,\n    leftActions: css`\n      display: flex;\n      flex-grow: 1;\n\n      max-width: 85%;\n      @media (max-width: 1345px) {\n        max-width: 75%;\n      }\n    `,\n    options: css`\n      padding-top: ${config.theme.spacing.sm};\n    `,\n    dataDisplayOptions: css`\n      flex-grow: 1;\n      min-width: 300px;\n      margin-right: ${config.theme.spacing.sm};\n    `,\n    selects: css`\n      display: flex;\n      > * {\n        margin-right: ${config.theme.spacing.sm};\n      }\n    `,\n  };\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AAeA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAEA;AACA;AAZA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAmBA;AArEA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAuEA;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAWA;AAAA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAxBA;AAAA;AAAA;AACA;AADA;AA0BA;AAAA;AACA;AAAA;AACA;AACA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+BA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AAQA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAGA;AAJA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAQA;AAGA;AAIA;AAIA;AAKA;AAGA;AAGA;AAKA;AAMA;AAGA;AASA;AAGA;AAKA;AArEA;AA4EA;;;;A","sourceRoot":""}