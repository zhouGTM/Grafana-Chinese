{"version":3,"file":"TeamPages.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/core/components/WithFeatureToggle.tsx","webpack:////./public/app/features/teams/TeamGroupSync.tsx","webpack:////./public/app/features/teams/TeamMemberRow.tsx","webpack:////./public/app/features/teams/TeamMembers.tsx","webpack:////./public/app/features/teams/TeamPages.tsx","webpack:////./public/app/features/teams/TeamSettings.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { LegacyForms, Tooltip, Icon } from '@grafana/ui';\nconst { Input } = LegacyForms;\n\nimport { TeamGroup } from '../../types';\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nexport interface Props {\n  groups: TeamGroup[];\n  loadTeamGroups: typeof loadTeamGroups;\n  addTeamGroup: typeof addTeamGroup;\n  removeTeamGroup: typeof removeTeamGroup;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst headerTooltip = `Sync LDAP or OAuth groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <a className=\"btn btn-danger btn-small\" onClick={() => this.onRemoveGroup(group)}>\n            <Icon name=\"times\" style={{ marginBottom: 0 }} />\n          </a>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const groups = this.props.groups;\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <h3 className=\"page-sub-heading\">外部组同步</h3>\n          <Tooltip placement=\"auto\" content={headerTooltip}>\n            <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n          </Tooltip>\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <button className=\"btn btn-primary pull-right\" onClick={this.onToggleAdding}>\n              <Icon name=\"plus\" /> 添加组\n            </button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <Icon name=\"times\" />\n            </button>\n            <h5>添加外部组</h5>\n            <form className=\"gf-form-inline\" onSubmit={this.onAddGroup}>\n              <div className=\"gf-form\">\n                <Input\n                  type=\"text\"\n                  className=\"gf-form-input width-30\"\n                  value={newGroupId}\n                  onChange={this.onNewGroupIdChanged}\n                  placeholder=\"cn=ops,ou=groups,dc=grafana,dc=org\"\n                />\n              </div>\n\n              <div className=\"gf-form\">\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" disabled={!this.isNewGroupValid()}>\n                  添加组\n                </button>\n              </div>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 && !isAdding && (\n          <EmptyListCTA\n            onClick={this.onToggleAdding}\n            buttonIcon=\"users-alt\"\n            title=\"没有要与之同步的外部组\"\n            buttonTitle=\"添加组\"\n            proTip={headerTooltip}\n            proTipLinkTitle=\"了解更多\"\n            proTipLink=\"http://docs.grafana.org/auth/enhanced_ldap/\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>外部组ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map(group => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { LegacyForms, DeleteButton } from '@grafana/ui';\nconst { Select } = LegacyForms;\nimport { SelectableValue } from '@grafana/data';\n\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { updateTeamMember, removeTeamMember } from './state/actions';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nexport interface Props {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n  removeTeamMember: typeof removeTeamMember;\n  updateTeamMember: typeof updateTeamMember;\n}\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find(dp => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          <div className=\"gf-form\">\n            {signedInUserIsTeamAdmin && (\n              <Select\n                isSearchable={false}\n                options={teamsPermissionLevels}\n                onChange={item => this.onPermissionChange(item, member)}\n                className=\"gf-form-select-box__control--menu-right\"\n                value={value}\n              />\n            )}\n            {!signedInUserIsTeamAdmin && <span>{value.label}</span>}\n          </div>\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img className=\"filter-table__avatar\" src={member.avatarUrl} />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton size=\"sm\" disabled={!signedInUserIsTeamAdmin} onConfirm={() => this.onRemoveMember(member)} />\n        </td>\n      </tr>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {};\n}\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { Icon } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { TeamMember, User } from 'app/types';\nimport { addTeamMember } from './state/actions';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv, User as SignedInUser } from 'app/core/services/context_srv';\nimport TeamMemberRow from './TeamMemberRow';\nimport { setSearchMemberQuery } from './state/reducers';\n\nexport interface Props {\n  members: TeamMember[];\n  searchMemberQuery: string;\n  addTeamMember: typeof addTeamMember;\n  setSearchMemberQuery: typeof setSearchMemberQuery;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUser: SignedInUser;\n}\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: User | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: User) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map(label => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} onClick={() => {}} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              labelClassName=\"gf-form--has-input-icon gf-form--grow\"\n              inputClassName=\"gf-form-input\"\n              placeholder=\"搜索成员\"\n              value={searchMemberQuery}\n              onChange={this.onSearchQueryChange}\n            />\n          </div>\n\n          <div className=\"page-action-bar__spacer\" />\n\n          <button\n            className=\"btn btn-primary pull-right\"\n            onClick={this.onToggleAdding}\n            disabled={isAdding || !isTeamAdmin}\n          >\n            添加成员\n          </button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <button className=\"cta-form__close btn btn-transparent\" onClick={this.onToggleAdding}>\n              <Icon name=\"times\" />\n            </button>\n            <h5>添加团队成员</h5>\n            <div className=\"gf-form-inline\">\n              <UserPicker onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <button className=\"btn btn-primary gf-form-btn\" type=\"submit\" onClick={this.onAddUserToTeam}>\n                  加入团队\n                </button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>登陆</th>\n                <th>电子邮件</th>\n                <th>名字</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>权限</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map(member => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport { hot } from 'react-hot-loader';\nimport config from 'app/core/config';\nimport Page from 'app/core/components/Page/Page';\nimport TeamMembers from './TeamMembers';\nimport TeamSettings from './TeamSettings';\nimport TeamGroupSync from './TeamGroupSync';\nimport { Team, TeamMember } from 'app/types';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getRouteParamsId, getRouteParamsPage } from '../../core/selectors/location';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { NavModel } from '@grafana/data';\n\nexport interface Props {\n  team: Team;\n  loadTeam: typeof loadTeam;\n  loadTeamMembers: typeof loadTeamMembers;\n  teamId: number;\n  pageName: string;\n  navModel: NavModel;\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: config.licenseInfo.hasLicense,\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    await this.props.loadTeamMembers();\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return _.includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (navModel: NavModel, isSignedInUserTeamAdmin: boolean) => {\n    if (!isSignedInUserTeamAdmin && navModel.main && navModel.main.children) {\n      navModel.main.children\n        .filter(navItem => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map(navItem => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return navModel;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n\n      case PageTypes.Settings:\n        return isSignedInUserTeamAdmin && <TeamSettings />;\n      case PageTypes.GroupSync:\n        return isSignedInUserTeamAdmin && isSyncEnabled && <TeamGroupSync />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, navModel, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navModel={this.hideTabsFromNonTeamAdmin(navModel, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n  const pageName = getRouteParamsPage(state.location) || 'members';\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const navModel = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav);\n  const team = getTeam(state.team, teamId);\n  const members = getTeamMembers(state.team);\n\n  return {\n    navModel,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(TeamPages));\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\n\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { updateTeam } from './state/actions';\nimport { getRouteParamsId } from 'app/core/selectors/location';\nimport { getTeam } from './state/selectors';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  team: Team;\n  updateTeam: typeof updateTeam;\n}\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  return (\n    <VerticalGroup>\n      <FieldSet label=\"团队设置\">\n        <Form\n          defaultValues={{ ...team }}\n          onSubmit={(formTeam: Team) => {\n            updateTeam(formTeam.name, formTeam.email);\n          }}\n        >\n          {({ register }) => (\n            <>\n              <Field label=\"名字\">\n                <Input name=\"name\" ref={register({ required: true })} />\n              </Field>\n\n              <Field label=\"电子邮件\" description=\"这是可选的，主要用于设置团队资料的头像（通过gravatar服务）\">\n                <Input placeholder=\"team@email.com\" type=\"email\" name=\"email\" ref={register} />\n              </Field>\n              <Button type=\"submit\">更新</Button>\n            </>\n          )}\n        </Form>\n      </FieldSet>\n      <SharedPreferences resourceUri={`teams/${team.id}`} />\n    </VerticalGroup>\n  );\n};\n\nfunction mapStateToProps(state: any) {\n  const teamId = getRouteParamsId(state.location);\n\n  return {\n    team: getTeam(state.team, teamId),\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSettings);\n"],"mappings":"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GA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AACA;AASA;AACA;AArEA;AAAA;AAAA;AAuEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAKA;AAlFA;AACA;AADA;AAAA;AACA;AAoFA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtJA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AATA;AAcA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAIA;;;;A","sourceRoot":""}