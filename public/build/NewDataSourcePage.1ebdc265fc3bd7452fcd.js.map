{"version":3,"file":"NewDataSourcePage.1ebdc265fc3bd7452fcd.js","sources":["webpack:////./public/app/core/components/Card/Card.tsx","webpack:////./public/app/features/datasources/NewDataSourcePage.tsx","webpack:////./public/app/features/plugins/PluginSignatureBadge.tsx"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\n\nexport interface CardProps {\n  logoUrl?: string;\n  title: string;\n  description?: string;\n  labels?: React.ReactNode;\n  actions?: React.ReactNode;\n  onClick?: () => void;\n  ariaLabel?: string;\n  className?: string;\n}\n\nexport const Card: React.FC<CardProps> = ({\n  logoUrl,\n  title,\n  description,\n  labels,\n  actions,\n  onClick,\n  ariaLabel,\n  className,\n}) => {\n  const mainClassName = cx('add-data-source-item', className);\n\n  return (\n    <div className={mainClassName} onClick={onClick} aria-label={ariaLabel}>\n      {logoUrl && <img className=\"add-data-source-item-logo\" src={logoUrl} />}\n      <div className=\"add-data-source-item-text-wrapper\">\n        <span className=\"add-data-source-item-text\">{title}</span>\n        {description && <span className=\"add-data-source-item-desc\">{description}</span>}\n        {labels && <div>{labels}</div>}\n      </div>\n      {actions && <div className=\"add-data-source-item-actions\">{actions}</div>}\n    </div>\n  );\n};\n","import React, { FC, PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { hot } from 'react-hot-loader';\nimport { DataSourcePluginMeta, NavModel } from '@grafana/data';\nimport { Button, LinkButton, List } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport Page from 'app/core/components/Page/Page';\nimport { DataSourcePluginCategory, StoreState } from 'app/types';\nimport { addDataSource, loadDataSourcePlugins } from './state/actions';\nimport { getDataSourcePlugins } from './state/selectors';\nimport { FilterInput } from 'app/core/components/FilterInput/FilterInput';\nimport { setDataSourceTypeSearchQuery } from './state/reducers';\nimport { PluginSignatureBadge } from '../plugins/PluginSignatureBadge';\nimport { Card } from 'app/core/components/Card/Card';\n\nexport interface Props {\n  navModel: NavModel;\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n  isLoading: boolean;\n  addDataSource: typeof addDataSource;\n  loadDataSourcePlugins: typeof loadDataSourcePlugins;\n  searchQuery: string;\n  setDataSourceTypeSearchQuery: typeof setDataSourceTypeSearchQuery;\n}\n\nclass NewDataSourcePage extends PureComponent<Props> {\n  componentDidMount() {\n    this.props.loadDataSourcePlugins();\n  }\n\n  onDataSourceTypeClicked = (plugin: DataSourcePluginMeta) => {\n    this.props.addDataSource(plugin);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setDataSourceTypeSearchQuery(value);\n  };\n\n  renderPlugins(plugins: DataSourcePluginMeta[]) {\n    if (!plugins || !plugins.length) {\n      return null;\n    }\n\n    return (\n      <List\n        items={plugins}\n        getItemKey={item => item.id.toString()}\n        renderItem={item => (\n          <DataSourceTypeCard\n            plugin={item}\n            onClick={() => this.onDataSourceTypeClicked(item)}\n            onLearnMoreClick={this.onLearnMoreClick}\n          />\n        )}\n      />\n    );\n  }\n\n  onLearnMoreClick = (evt: React.SyntheticEvent<HTMLElement>) => {\n    evt.stopPropagation();\n  };\n\n  renderCategories() {\n    const { categories } = this.props;\n\n    return (\n      <>\n        {categories.map(category => (\n          <div className=\"add-data-source-category\" key={category.id}>\n            <div className=\"add-data-source-category__header\">{category.title}</div>\n            {this.renderPlugins(category.plugins)}\n          </div>\n        ))}\n        <div className=\"add-data-source-more\">\n          <LinkButton\n            variant=\"secondary\"\n            href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            在grafana.com上查找更多数据源插件\n          </LinkButton>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { navModel, isLoading, searchQuery, plugins } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <FilterInput value={searchQuery} onChange={this.onSearchQueryChange} placeholder=\"按名称或类型过滤\" />\n            <div className=\"page-action-bar__spacer\" />\n            <LinkButton href=\"datasources\">取消</LinkButton>\n          </div>\n          <div>\n            {searchQuery && this.renderPlugins(plugins)}\n            {!searchQuery && this.renderCategories()}\n          </div>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\ninterface DataSourceTypeCardProps {\n  plugin: DataSourcePluginMeta;\n  onClick: () => void;\n  onLearnMoreClick: (evt: React.SyntheticEvent<HTMLElement>) => void;\n}\n\nconst DataSourceTypeCard: FC<DataSourceTypeCardProps> = props => {\n  const { plugin, onLearnMoreClick } = props;\n  const isPhantom = plugin.module === 'phantom';\n  const onClick = !isPhantom ? props.onClick : () => {};\n\n  // find first plugin info link\n  const learnMoreLink = plugin.info.links && plugin.info.links.length > 0 ? plugin.info.links[0] : null;\n\n  return (\n    <Card\n      title={plugin.name}\n      description={plugin.info.description}\n      ariaLabel={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n      logoUrl={plugin.info.logos.small}\n      actions={\n        <>\n          {learnMoreLink && (\n            <LinkButton\n              variant=\"secondary\"\n              href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n              target=\"_blank\"\n              rel=\"noopener\"\n              onClick={onLearnMoreClick}\n              icon=\"external-link-alt\"\n            >\n              {learnMoreLink.name}\n            </LinkButton>\n          )}\n          {!isPhantom && <Button>选择</Button>}\n        </>\n      }\n      labels={\n        !isPhantom && (\n          <div>\n            <PluginSignatureBadge status={plugin.signature} />\n          </div>\n        )\n      }\n      className={isPhantom ? 'add-data-source-item--phantom' : ''}\n      onClick={onClick}\n      aria-label={selectors.pages.AddDataSource.dataSourcePlugins(plugin.name)}\n    />\n  );\n};\n\nexport function getNavModel(): NavModel {\n  const main = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: '添加数据源',\n    href: 'datasources/new',\n    subTitle: '选择数据源类型',\n  };\n\n  return {\n    main: main,\n    node: main,\n  };\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(),\n    plugins: getDataSourcePlugins(state.dataSources),\n    searchQuery: state.dataSources.dataSourceTypeSearchQuery,\n    categories: state.dataSources.categories,\n    isLoading: state.dataSources.isLoadingDataSources,\n  };\n}\n\nconst mapDispatchToProps = {\n  addDataSource,\n  loadDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n};\n\nexport default hot(module)(connect(mapStateToProps, mapDispatchToProps)(NewDataSourcePage));\n","import React from 'react';\nimport { Badge, BadgeProps } from '@grafana/ui';\nimport { PluginSignatureStatus } from '@grafana/data';\n\ninterface Props {\n  status?: PluginSignatureStatus;\n}\n\nexport const PluginSignatureBadge: React.FC<Props> = ({ status }) => {\n  const display = getSignatureDisplayModel(status);\n  return <Badge text={display.text} color={display.color} icon={display.icon} tooltip={display.tooltip} />;\n};\n\nfunction getSignatureDisplayModel(signature?: PluginSignatureStatus): BadgeProps {\n  if (!signature) {\n    signature = PluginSignatureStatus.invalid;\n  }\n\n  switch (signature) {\n    case PluginSignatureStatus.internal:\n      return { text: '核心', icon: 'cube', color: 'blue', tooltip: '与Grafana捆绑在一起的核心插件' };\n    case PluginSignatureStatus.valid:\n      return { text: '签名', icon: 'lock', color: 'green', tooltip: '签名并验证的插件' };\n    case PluginSignatureStatus.invalid:\n      return {\n        text: '无效',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: '无效的插件签名',\n      };\n    case PluginSignatureStatus.modified:\n      return {\n        text: '已修改',\n        icon: 'exclamation-triangle',\n        color: 'red',\n        tooltip: '有效签名，但内容已被修改',\n      };\n  }\n\n  return { text: '未签名', icon: 'exclamation-triangle', color: 'red', tooltip: '未签名的外部插件' };\n}\n\nPluginSignatureBadge.displayName = 'PluginSignatureBadge';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;;;;;;;;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AACA;AACA;AACA;;;;;;AAnCA;AACA;AACA;;;AAUA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AADA;AAHA;AAYA;;;AAMA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAFA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAWA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AASA;;;;AAhFA;AACA;AAwFA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAcA;AAGA;AAAA;AAIA;AACA;AACA;AA/BA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;;AChMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAbA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}